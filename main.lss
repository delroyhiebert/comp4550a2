
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00000da8  00000e3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000da8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a0  00800150  00800150  00000e8c  2**0
                  ALLOC
  3 .stab         00004314  00000000  00000000  00000e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001882  00000000  00000000  000051a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00006a22  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6d 00 	jmp	0xda	; 0xda <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__vector_11>
  30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  40:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  58:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__vector_22>
  5c:	76 02       	muls	r23, r22
  5e:	71 02       	muls	r23, r17
  60:	6c 02       	muls	r22, r28
  62:	7b 02       	muls	r23, r27
  64:	80 02       	muls	r24, r16
  66:	97 02       	muls	r25, r23
  68:	85 02       	muls	r24, r21
  6a:	8f 02       	muls	r24, r31
  6c:	8a 02       	muls	r24, r26

0000006e <LCD_character_table>:
  6e:	51 0a 80 2a 00 00 00 0a 51 0a 00 00 59 55 18 01     Q..*....Q...YU..
  7e:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
	...
  9a:	00 00 51 0f 91 39 41 14 91 31 41 1e 41 0e 41 1d     ..Q..9A..1A.A.A.
  aa:	50 0f 80 20 10 15 48 86 40 14 78 05 70 85 51 15     P.. ..H.@.x.p.Q.
  ba:	51 0e 51 95 51 8e 21 90 81 20 50 15 48 44 50 c5     Q.Q.Q.!.. P.HDP.
  ca:	28 c0 28 20 09 50 00 00 00 00 00 00 00 00 00 00     (.( .P..........

000000da <__ctors_end>:
  da:	11 24       	eor	r1, r1
  dc:	1f be       	out	0x3f, r1	; 63
  de:	cf ef       	ldi	r28, 0xFF	; 255
  e0:	d4 e0       	ldi	r29, 0x04	; 4
  e2:	de bf       	out	0x3e, r29	; 62
  e4:	cd bf       	out	0x3d, r28	; 61

000000e6 <__do_copy_data>:
  e6:	11 e0       	ldi	r17, 0x01	; 1
  e8:	a0 e0       	ldi	r26, 0x00	; 0
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	e8 ea       	ldi	r30, 0xA8	; 168
  ee:	fd e0       	ldi	r31, 0x0D	; 13
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <__do_copy_data+0x10>
  f2:	05 90       	lpm	r0, Z+
  f4:	0d 92       	st	X+, r0
  f6:	a0 35       	cpi	r26, 0x50	; 80
  f8:	b1 07       	cpc	r27, r17
  fa:	d9 f7       	brne	.-10     	; 0xf2 <__do_copy_data+0xc>

000000fc <__do_clear_bss>:
  fc:	11 e0       	ldi	r17, 0x01	; 1
  fe:	a0 e5       	ldi	r26, 0x50	; 80
 100:	b1 e0       	ldi	r27, 0x01	; 1
 102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
 104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
 106:	a0 3f       	cpi	r26, 0xF0	; 240
 108:	b1 07       	cpc	r27, r17
 10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>
 10c:	0e 94 a1 04 	call	0x942	; 0x942 <main>
 110:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <_exit>

00000114 <__bad_interrupt>:
 114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <__vector_11>:
jmp_buf task1_jb;
jmp_buf task2_jb;
jmp_buf task3_jb;
jmp_buf task4_jb;

ISR(TIMER0_OVF_vect) {
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	2f 93       	push	r18
 124:	3f 93       	push	r19
 126:	4f 93       	push	r20
 128:	5f 93       	push	r21
 12a:	6f 93       	push	r22
 12c:	7f 93       	push	r23
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
 132:	af 93       	push	r26
 134:	bf 93       	push	r27
 136:	ef 93       	push	r30
 138:	ff 93       	push	r31

  note_timer += interrupt;
 13a:	60 91 a6 01 	lds	r22, 0x01A6
 13e:	70 91 a7 01 	lds	r23, 0x01A7
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 a4 05 	call	0xb48	; 0xb48 <__floatunsisf>
 14a:	2f e6       	ldi	r18, 0x6F	; 111
 14c:	32 e1       	ldi	r19, 0x12	; 18
 14e:	43 e0       	ldi	r20, 0x03	; 3
 150:	52 e4       	ldi	r21, 0x42	; 66
 152:	0e 94 ac 04 	call	0x958	; 0x958 <__addsf3>
 156:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__fixunssfsi>
 15a:	70 93 a7 01 	sts	0x01A7, r23
 15e:	60 93 a6 01 	sts	0x01A6, r22
  switch( state )
 162:	80 91 a1 01 	lds	r24, 0x01A1
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	99 f0       	breq	.+38     	; 0x190 <__vector_11+0x78>
 16a:	28 f0       	brcs	.+10     	; 0x176 <__vector_11+0x5e>
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	71 f0       	breq	.+28     	; 0x18c <__vector_11+0x74>
 170:	83 30       	cpi	r24, 0x03	; 3
 172:	71 f0       	breq	.+28     	; 0x190 <__vector_11+0x78>
 174:	23 c0       	rjmp	.+70     	; 0x1bc <__vector_11+0xa4>
  {
    case 0:
            volume_counter += increment;
 176:	20 91 82 01 	lds	r18, 0x0182
 17a:	30 91 83 01 	lds	r19, 0x0183
 17e:	80 91 9f 01 	lds	r24, 0x019F
 182:	90 91 a0 01 	lds	r25, 0x01A0
 186:	82 0f       	add	r24, r18
 188:	93 1f       	adc	r25, r19
 18a:	0c c0       	rjmp	.+24     	; 0x1a4 <__vector_11+0x8c>
    case 1:
            volume_counter -= increment;
            OCR1A = volume_counter;//( note_amplitude - ((note_timer / decay) * ( 0.3 * note_amplitude )) );
            break;
    case 2:
            asm volatile("nop"::);
 18c:	00 00       	nop
            break;
 18e:	16 c0       	rjmp	.+44     	; 0x1bc <__vector_11+0xa4>
    case 3:
            volume_counter -= increment;
 190:	80 91 82 01 	lds	r24, 0x0182
 194:	90 91 83 01 	lds	r25, 0x0183
 198:	20 91 9f 01 	lds	r18, 0x019F
 19c:	30 91 a0 01 	lds	r19, 0x01A0
 1a0:	82 1b       	sub	r24, r18
 1a2:	93 0b       	sbc	r25, r19
 1a4:	90 93 83 01 	sts	0x0183, r25
 1a8:	80 93 82 01 	sts	0x0182, r24
            OCR1A = volume_counter;//( (1 - (note_timer / release)) * OCR1A);
 1ac:	80 91 82 01 	lds	r24, 0x0182
 1b0:	90 91 83 01 	lds	r25, 0x0183
 1b4:	90 93 89 00 	sts	0x0089, r25
 1b8:	80 93 88 00 	sts	0x0088, r24
            break;
  }
}
 1bc:	ff 91       	pop	r31
 1be:	ef 91       	pop	r30
 1c0:	bf 91       	pop	r27
 1c2:	af 91       	pop	r26
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	7f 91       	pop	r23
 1ca:	6f 91       	pop	r22
 1cc:	5f 91       	pop	r21
 1ce:	4f 91       	pop	r20
 1d0:	3f 91       	pop	r19
 1d2:	2f 91       	pop	r18
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <displayTimer>:
    longjmp( task1_jb, 1 );
  }
}

void displayTimer()
{
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	00 d0       	rcall	.+0      	; 0x1e8 <displayTimer+0xa>
 1e8:	00 d0       	rcall	.+0      	; 0x1ea <displayTimer+0xc>
 1ea:	1f 92       	push	r1
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
  int counter = 180;
  int i = counter;
 1f0:	04 eb       	ldi	r16, 0xB4	; 180
 1f2:	10 e0       	ldi	r17, 0x00	; 0
  char num[5];

  for( i; i >= 0; i-- )
  {
    itoa( i, num, 10 );
 1f4:	4a e0       	ldi	r20, 0x0A	; 10
 1f6:	50 e0       	ldi	r21, 0x00	; 0
 1f8:	be 01       	movw	r22, r28
 1fa:	6f 5f       	subi	r22, 0xFF	; 255
 1fc:	7f 4f       	sbci	r23, 0xFF	; 255
 1fe:	c8 01       	movw	r24, r16
 200:	0e 94 a1 06 	call	0xd42	; 0xd42 <itoa>
    LCD_puts( num, 0 );
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	ce 01       	movw	r24, r28
 208:	01 96       	adiw	r24, 0x01	; 1
 20a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20e:	8f e4       	ldi	r24, 0x4F	; 79
 210:	93 ec       	ldi	r25, 0xC3	; 195
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <displayTimer+0x34>
 216:	00 c0       	rjmp	.+0      	; 0x218 <displayTimer+0x3a>
 218:	00 00       	nop
{
  int counter = 180;
  int i = counter;
  char num[5];

  for( i; i >= 0; i-- )
 21a:	01 50       	subi	r16, 0x01	; 1
 21c:	11 09       	sbc	r17, r1
 21e:	50 f7       	brcc	.-44     	; 0x1f4 <displayTimer+0x16>
    LCD_puts( num, 0 );
    _delay_ms(100);
    //lcdputs counter
    //yield()
  }
}
 220:	0f 90       	pop	r0
 222:	0f 90       	pop	r0
 224:	0f 90       	pop	r0
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	1f 91       	pop	r17
 230:	0f 91       	pop	r16
 232:	08 95       	ret

00000234 <task2>:
  }
  task2();
}

void task2()
{
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
  if( setjmp( task2_jb ) == 0 )
 23c:	84 e8       	ldi	r24, 0x84	; 132
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	0e 94 60 06 	call	0xcc0	; 0xcc0 <setjmp>
 244:	89 2b       	or	r24, r25
 246:	19 f4       	brne	.+6      	; 0x24e <task2+0x1a>
  {
    longjmp( task1_jb, 2 );
 248:	62 e0       	ldi	r22, 0x02	; 2
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	04 c0       	rjmp	.+8      	; 0x256 <task2+0x22>
  }
  else
  {
    displayTimer();
 24e:	0e 94 ef 00 	call	0x1de	; 0x1de <displayTimer>
    longjmp( task1_jb, 1 );
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	8b e6       	ldi	r24, 0x6B	; 107
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	0e 94 80 06 	call	0xd00	; 0xd00 <longjmp>

0000025e <task2_tramp>:
  int i = 0;
  for( i; i < sizeof(hole)/sizeof(hole[0]); ++i )
  {
    hole[i] = i;
  }
  task2();
 25e:	0e 94 1a 01 	call	0x234	; 0x234 <task2>

00000262 <play_note_timer>:
  }
  //yield();
}

void play_note_timer( int amplitude, uint16_t pitch, uint16_t duration )
{//play notes with a timer interrupt and an ADSR envelope
 262:	cf 92       	push	r12
 264:	df 92       	push	r13
 266:	ef 92       	push	r14
 268:	ff 92       	push	r15
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	ea 01       	movw	r28, r20
  ICR1 = pitch;
 270:	70 93 87 00 	sts	0x0087, r23
 274:	60 93 86 00 	sts	0x0086, r22
  attack = duration / 4;
 278:	9a 01       	movw	r18, r20
 27a:	36 95       	lsr	r19
 27c:	27 95       	ror	r18
 27e:	36 95       	lsr	r19
 280:	27 95       	ror	r18
 282:	30 93 9c 01 	sts	0x019C, r19
 286:	20 93 9b 01 	sts	0x019B, r18
  decay = attack / 2;
 28a:	20 91 9b 01 	lds	r18, 0x019B
 28e:	30 91 9c 01 	lds	r19, 0x019C
 292:	36 95       	lsr	r19
 294:	27 95       	ror	r18
 296:	30 93 9e 01 	sts	0x019E, r19
 29a:	20 93 9d 01 	sts	0x019D, r18
  sustain = attack * 2;
 29e:	20 91 9b 01 	lds	r18, 0x019B
 2a2:	30 91 9c 01 	lds	r19, 0x019C
 2a6:	22 0f       	add	r18, r18
 2a8:	33 1f       	adc	r19, r19
 2aa:	30 93 a5 01 	sts	0x01A5, r19
 2ae:	20 93 a4 01 	sts	0x01A4, r18
  release = decay;
 2b2:	20 91 9d 01 	lds	r18, 0x019D
 2b6:	30 91 9e 01 	lds	r19, 0x019E
 2ba:	30 93 a3 01 	sts	0x01A3, r19
 2be:	20 93 a2 01 	sts	0x01A2, r18

  note_amplitude = amplitude;
 2c2:	90 93 a9 01 	sts	0x01A9, r25
 2c6:	80 93 a8 01 	sts	0x01A8, r24

  increment = (amplitude / (duration / interrupt));
 2ca:	bc 01       	movw	r22, r24
 2cc:	88 27       	eor	r24, r24
 2ce:	77 fd       	sbrc	r23, 7
 2d0:	80 95       	com	r24
 2d2:	98 2f       	mov	r25, r24
 2d4:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__floatsisf>
 2d8:	6b 01       	movw	r12, r22
 2da:	7c 01       	movw	r14, r24
 2dc:	be 01       	movw	r22, r28
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 a4 05 	call	0xb48	; 0xb48 <__floatunsisf>
 2e6:	2f e6       	ldi	r18, 0x6F	; 111
 2e8:	32 e1       	ldi	r19, 0x12	; 18
 2ea:	43 e0       	ldi	r20, 0x03	; 3
 2ec:	52 e4       	ldi	r21, 0x42	; 66
 2ee:	0e 94 10 05 	call	0xa20	; 0xa20 <__divsf3>
 2f2:	9b 01       	movw	r18, r22
 2f4:	ac 01       	movw	r20, r24
 2f6:	c7 01       	movw	r24, r14
 2f8:	b6 01       	movw	r22, r12
 2fa:	0e 94 10 05 	call	0xa20	; 0xa20 <__divsf3>
 2fe:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__fixunssfsi>
 302:	70 93 a0 01 	sts	0x01A0, r23
 306:	60 93 9f 01 	sts	0x019F, r22
  volume_counter = 0;
 30a:	10 92 83 01 	sts	0x0183, r1
 30e:	10 92 82 01 	sts	0x0182, r1
  
  note_timer = 0;
 312:	10 92 a7 01 	sts	0x01A7, r1
 316:	10 92 a6 01 	sts	0x01A6, r1
  state = 0;
 31a:	10 92 a1 01 	sts	0x01A1, r1
  while( note_timer < attack )
 31e:	20 91 a6 01 	lds	r18, 0x01A6
 322:	30 91 a7 01 	lds	r19, 0x01A7
 326:	80 91 9b 01 	lds	r24, 0x019B
 32a:	90 91 9c 01 	lds	r25, 0x019C
 32e:	28 17       	cp	r18, r24
 330:	39 07       	cpc	r19, r25
 332:	10 f4       	brcc	.+4      	; 0x338 <play_note_timer+0xd6>
    asm volatile("nop"::);
 334:	00 00       	nop
 336:	f3 cf       	rjmp	.-26     	; 0x31e <play_note_timer+0xbc>
  note_timer = 0;
 338:	10 92 a7 01 	sts	0x01A7, r1
 33c:	10 92 a6 01 	sts	0x01A6, r1
  state = 1;
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	80 93 a1 01 	sts	0x01A1, r24
  while( note_timer < decay)
 346:	20 91 a6 01 	lds	r18, 0x01A6
 34a:	30 91 a7 01 	lds	r19, 0x01A7
 34e:	80 91 9d 01 	lds	r24, 0x019D
 352:	90 91 9e 01 	lds	r25, 0x019E
 356:	28 17       	cp	r18, r24
 358:	39 07       	cpc	r19, r25
 35a:	10 f4       	brcc	.+4      	; 0x360 <play_note_timer+0xfe>
    asm volatile("nop"::);
 35c:	00 00       	nop
 35e:	f3 cf       	rjmp	.-26     	; 0x346 <play_note_timer+0xe4>
  note_timer = 0;
 360:	10 92 a7 01 	sts	0x01A7, r1
 364:	10 92 a6 01 	sts	0x01A6, r1
  state = 2;
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	80 93 a1 01 	sts	0x01A1, r24
  while( note_timer < sustain )
 36e:	20 91 a6 01 	lds	r18, 0x01A6
 372:	30 91 a7 01 	lds	r19, 0x01A7
 376:	80 91 a4 01 	lds	r24, 0x01A4
 37a:	90 91 a5 01 	lds	r25, 0x01A5
 37e:	28 17       	cp	r18, r24
 380:	39 07       	cpc	r19, r25
 382:	10 f4       	brcc	.+4      	; 0x388 <play_note_timer+0x126>
    asm volatile("nop"::);
 384:	00 00       	nop
 386:	f3 cf       	rjmp	.-26     	; 0x36e <play_note_timer+0x10c>
  note_timer = 0;
 388:	10 92 a7 01 	sts	0x01A7, r1
 38c:	10 92 a6 01 	sts	0x01A6, r1
  state = 3;
 390:	83 e0       	ldi	r24, 0x03	; 3
 392:	80 93 a1 01 	sts	0x01A1, r24
  while( note_timer < release )
 396:	20 91 a6 01 	lds	r18, 0x01A6
 39a:	30 91 a7 01 	lds	r19, 0x01A7
 39e:	80 91 a2 01 	lds	r24, 0x01A2
 3a2:	90 91 a3 01 	lds	r25, 0x01A3
 3a6:	28 17       	cp	r18, r24
 3a8:	39 07       	cpc	r19, r25
 3aa:	10 f4       	brcc	.+4      	; 0x3b0 <play_note_timer+0x14e>
    asm volatile("nop"::);
 3ac:	00 00       	nop
 3ae:	f3 cf       	rjmp	.-26     	; 0x396 <play_note_timer+0x134>
}
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	ff 90       	pop	r15
 3b6:	ef 90       	pop	r14
 3b8:	df 90       	pop	r13
 3ba:	cf 90       	pop	r12
 3bc:	08 95       	ret

000003be <play_note_delay>:

void play_note_delay( int amplitude, uint16_t pitch, uint16_t duration )
{//Play note with delay calculated ADSR envelope
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	9a 01       	movw	r18, r20
  
  ICR1 = pitch;
 3c4:	70 93 87 00 	sts	0x0087, r23
 3c8:	60 93 86 00 	sts	0x0086, r22
  int attack = duration / 4;
 3cc:	36 95       	lsr	r19
 3ce:	27 95       	ror	r18
 3d0:	36 95       	lsr	r19
 3d2:	27 95       	ror	r18
  int decay = attack / 2;
 3d4:	f9 01       	movw	r30, r18
 3d6:	f5 95       	asr	r31
 3d8:	e7 95       	ror	r30
  int sustain = attack * 2;
 3da:	e9 01       	movw	r28, r18
 3dc:	cc 0f       	add	r28, r28
 3de:	dd 1f       	adc	r29, r29
  int release = decay;
  int increment = amplitude / attack;
 3e0:	b9 01       	movw	r22, r18
 3e2:	0e 94 32 06 	call	0xc64	; 0xc64 <__divmodhi4>

  int i = 0;
  int counter = 0;
  for( i; i < attack; i++ )
 3e6:	ab 01       	movw	r20, r22
  int decay = attack / 2;
  int sustain = attack * 2;
  int release = decay;
  int increment = amplitude / attack;

  int i = 0;
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	90 e0       	ldi	r25, 0x00	; 0
  int counter = 0;
  for( i; i < attack; i++ )
 3ec:	82 17       	cp	r24, r18
 3ee:	93 07       	cpc	r25, r19
 3f0:	74 f4       	brge	.+28     	; 0x40e <play_note_delay+0x50>
  {
    counter += increment;
    OCR1A = counter;
 3f2:	50 93 89 00 	sts	0x0089, r21
 3f6:	40 93 88 00 	sts	0x0088, r20
 3fa:	a3 ef       	ldi	r26, 0xF3	; 243
 3fc:	b1 e0       	ldi	r27, 0x01	; 1
 3fe:	11 97       	sbiw	r26, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <play_note_delay+0x40>
 402:	00 c0       	rjmp	.+0      	; 0x404 <play_note_delay+0x46>
 404:	00 00       	nop
  int release = decay;
  int increment = amplitude / attack;

  int i = 0;
  int counter = 0;
  for( i; i < attack; i++ )
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	46 0f       	add	r20, r22
 40a:	57 1f       	adc	r21, r23
 40c:	ef cf       	rjmp	.-34     	; 0x3ec <play_note_delay+0x2e>
 40e:	62 9f       	mul	r22, r18
 410:	a0 01       	movw	r20, r0
 412:	63 9f       	mul	r22, r19
 414:	50 0d       	add	r21, r0
 416:	72 9f       	mul	r23, r18
 418:	50 0d       	add	r21, r0
 41a:	11 24       	eor	r1, r1
 41c:	9a 01       	movw	r18, r20
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	90 e0       	ldi	r25, 0x00	; 0
    OCR1A = counter;
    _delay_ms(1);
  }

  i = 0;
  for( i; i< decay; i++)
 422:	8e 17       	cp	r24, r30
 424:	9f 07       	cpc	r25, r31
 426:	74 f4       	brge	.+28     	; 0x444 <play_note_delay+0x86>
  {
    counter -= increment;
 428:	26 1b       	sub	r18, r22
 42a:	37 0b       	sbc	r19, r23
    OCR1A = counter;
 42c:	30 93 89 00 	sts	0x0089, r19
 430:	20 93 88 00 	sts	0x0088, r18
 434:	a3 ef       	ldi	r26, 0xF3	; 243
 436:	b1 e0       	ldi	r27, 0x01	; 1
 438:	11 97       	sbiw	r26, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <play_note_delay+0x7a>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <play_note_delay+0x80>
 43e:	00 00       	nop
    OCR1A = counter;
    _delay_ms(1);
  }

  i = 0;
  for( i; i< decay; i++)
 440:	01 96       	adiw	r24, 0x01	; 1
 442:	ef cf       	rjmp	.-34     	; 0x422 <play_note_delay+0x64>
 444:	aa 27       	eor	r26, r26
 446:	bb 27       	eor	r27, r27
 448:	a6 1b       	sub	r26, r22
 44a:	b7 0b       	sbc	r27, r23
 44c:	ae 9f       	mul	r26, r30
 44e:	c0 01       	movw	r24, r0
 450:	af 9f       	mul	r26, r31
 452:	90 0d       	add	r25, r0
 454:	be 9f       	mul	r27, r30
 456:	90 0d       	add	r25, r0
 458:	11 24       	eor	r1, r1
 45a:	84 0f       	add	r24, r20
 45c:	95 1f       	adc	r25, r21
 45e:	20 e0       	ldi	r18, 0x00	; 0
 460:	30 e0       	ldi	r19, 0x00	; 0
    OCR1A = counter;
    _delay_ms(1);
  }

  i = 0;
  for( i; i < sustain; i++ )
 462:	2c 17       	cp	r18, r28
 464:	3d 07       	cpc	r19, r29
 466:	4c f4       	brge	.+18     	; 0x47a <play_note_delay+0xbc>
 468:	a3 ef       	ldi	r26, 0xF3	; 243
 46a:	b1 e0       	ldi	r27, 0x01	; 1
 46c:	11 97       	sbiw	r26, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <play_note_delay+0xae>
 470:	00 c0       	rjmp	.+0      	; 0x472 <play_note_delay+0xb4>
 472:	00 00       	nop
 474:	2f 5f       	subi	r18, 0xFF	; 255
 476:	3f 4f       	sbci	r19, 0xFF	; 255
 478:	f4 cf       	rjmp	.-24     	; 0x462 <play_note_delay+0xa4>
 47a:	20 e0       	ldi	r18, 0x00	; 0
 47c:	30 e0       	ldi	r19, 0x00	; 0
  {
    _delay_ms(1);
  }

  i = 0;
  for( i; i < release; i++)
 47e:	2e 17       	cp	r18, r30
 480:	3f 07       	cpc	r19, r31
 482:	7c f4       	brge	.+30     	; 0x4a2 <play_note_delay+0xe4>
  {
    counter -= increment;
 484:	86 1b       	sub	r24, r22
 486:	97 0b       	sbc	r25, r23
    OCR1A = counter;
 488:	90 93 89 00 	sts	0x0089, r25
 48c:	80 93 88 00 	sts	0x0088, r24
 490:	a3 ef       	ldi	r26, 0xF3	; 243
 492:	b1 e0       	ldi	r27, 0x01	; 1
 494:	11 97       	sbiw	r26, 0x01	; 1
 496:	f1 f7       	brne	.-4      	; 0x494 <play_note_delay+0xd6>
 498:	00 c0       	rjmp	.+0      	; 0x49a <play_note_delay+0xdc>
 49a:	00 00       	nop
  {
    _delay_ms(1);
  }

  i = 0;
  for( i; i < release; i++)
 49c:	2f 5f       	subi	r18, 0xFF	; 255
 49e:	3f 4f       	sbci	r19, 0xFF	; 255
 4a0:	ee cf       	rjmp	.-36     	; 0x47e <play_note_delay+0xc0>
    counter -= increment;
    OCR1A = counter;
    _delay_ms(1);
  }

}
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <playSong>:
    //yield()
  }
}

void playSong()
{
 4a8:	0f 93       	push	r16
 4aa:	1f 93       	push	r17
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	00 e0       	ldi	r16, 0x00	; 0
 4b2:	11 e0       	ldi	r17, 0x01	; 1
 4b4:	ca e1       	ldi	r28, 0x1A	; 26
 4b6:	d1 e0       	ldi	r29, 0x01	; 1
  int i = 0;
  int (*play_note_ptr)(int, uint16_t, uint16_t);
  play_note_ptr = &play_note_delay;//change to delay/timer to use different functionality
  for( i; i < (sizeof(noteslist)/sizeof(uint8_t)); i++ )
 4b8:	f1 e0       	ldi	r31, 0x01	; 1
 4ba:	0a 31       	cpi	r16, 0x1A	; 26
 4bc:	1f 07       	cpc	r17, r31
 4be:	c9 f1       	breq	.+114    	; 0x532 <__stack+0x33>
  {
    switch (noteslist[i])
 4c0:	f8 01       	movw	r30, r16
 4c2:	81 91       	ld	r24, Z+
 4c4:	8f 01       	movw	r16, r30
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	89 30       	cpi	r24, 0x09	; 9
 4ca:	91 05       	cpc	r25, r1
 4cc:	80 f5       	brcc	.+96     	; 0x52e <__stack+0x2f>
 4ce:	fc 01       	movw	r30, r24
 4d0:	e2 5d       	subi	r30, 0xD2	; 210
 4d2:	ff 4f       	sbci	r31, 0xFF	; 255
 4d4:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__tablejump2__>
    {
      case quarter: //playQuarter();
              (*play_note_ptr)( 500, keyslist[i], q_count);
 4d8:	68 81       	ld	r22, Y
 4da:	79 81       	ldd	r23, Y+1	; 0x01
 4dc:	44 ef       	ldi	r20, 0xF4	; 244
 4de:	51 e0       	ldi	r21, 0x01	; 1
 4e0:	22 c0       	rjmp	.+68     	; 0x526 <__stack+0x27>
              break;
      case half: //playHalf();
              (*play_note_ptr)( 500, keyslist[i], h_count);
 4e2:	68 81       	ld	r22, Y
 4e4:	79 81       	ldd	r23, Y+1	; 0x01
 4e6:	48 ee       	ldi	r20, 0xE8	; 232
 4e8:	53 e0       	ldi	r21, 0x03	; 3
 4ea:	1d c0       	rjmp	.+58     	; 0x526 <__stack+0x27>
              break;
      case whole: //playWhole();
              (*play_note_ptr)( 500, keyslist[i], w_count);
 4ec:	68 81       	ld	r22, Y
 4ee:	79 81       	ldd	r23, Y+1	; 0x01
 4f0:	40 ed       	ldi	r20, 0xD0	; 208
 4f2:	57 e0       	ldi	r21, 0x07	; 7
 4f4:	18 c0       	rjmp	.+48     	; 0x526 <__stack+0x27>
              break;
      case eigth:
              (*play_note_ptr)( 500, keyslist[i], e_count);
 4f6:	68 81       	ld	r22, Y
 4f8:	79 81       	ldd	r23, Y+1	; 0x01
 4fa:	4a ef       	ldi	r20, 0xFA	; 250
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	13 c0       	rjmp	.+38     	; 0x526 <__stack+0x27>
              break;
      case sixteenth:
              (*play_note_ptr)( 500, keyslist[i], s_count);
 500:	68 81       	ld	r22, Y
 502:	79 81       	ldd	r23, Y+1	; 0x01
 504:	4d e7       	ldi	r20, 0x7D	; 125
 506:	50 e0       	ldi	r21, 0x00	; 0
 508:	0e c0       	rjmp	.+28     	; 0x526 <__stack+0x27>
              break;
      case edot:
              (*play_note_ptr)( 500, keyslist[i], edot_count);
 50a:	68 81       	ld	r22, Y
 50c:	79 81       	ldd	r23, Y+1	; 0x01
 50e:	47 e7       	ldi	r20, 0x77	; 119
 510:	51 e0       	ldi	r21, 0x01	; 1
 512:	09 c0       	rjmp	.+18     	; 0x526 <__stack+0x27>
              break;
      case qdot:
              (*play_note_ptr)( 500, keyslist[i], qdot_count);
 514:	68 81       	ld	r22, Y
 516:	79 81       	ldd	r23, Y+1	; 0x01
 518:	4e ee       	ldi	r20, 0xEE	; 238
 51a:	52 e0       	ldi	r21, 0x02	; 2
 51c:	04 c0       	rjmp	.+8      	; 0x526 <__stack+0x27>
              break;
      case hdot:
              (*play_note_ptr)( 500, keyslist[i], hdot_count);
 51e:	68 81       	ld	r22, Y
 520:	79 81       	ldd	r23, Y+1	; 0x01
 522:	4c ed       	ldi	r20, 0xDC	; 220
 524:	55 e0       	ldi	r21, 0x05	; 5
 526:	84 ef       	ldi	r24, 0xF4	; 244
 528:	91 e0       	ldi	r25, 0x01	; 1
 52a:	0e 94 df 01 	call	0x3be	; 0x3be <play_note_delay>
 52e:	22 96       	adiw	r28, 0x02	; 2
 530:	c3 cf       	rjmp	.-122    	; 0x4b8 <playSong+0x10>
              break;
    }
  }
  //yield();
}
 532:	df 91       	pop	r29
 534:	cf 91       	pop	r28
 536:	1f 91       	pop	r17
 538:	0f 91       	pop	r16
 53a:	08 95       	ret

0000053c <task1>:
    }
  return 0;   /* never reached */
}

void task1()
{
 53c:	cf 93       	push	r28
 53e:	df 93       	push	r29
 540:	cd b7       	in	r28, 0x3d	; 61
 542:	de b7       	in	r29, 0x3e	; 62
  for(;;)
  {
    if( setjmp( task1_jb) == 0 )
 544:	8b e6       	ldi	r24, 0x6B	; 107
 546:	91 e0       	ldi	r25, 0x01	; 1
 548:	0e 94 60 06 	call	0xcc0	; 0xcc0 <setjmp>
 54c:	89 2b       	or	r24, r25
 54e:	11 f4       	brne	.+4      	; 0x554 <task1+0x18>
  int i = 0;
  for( i; i < sizeof(hole)/sizeof(hole[0]); ++i )
  {
    hole[i] = i;
  }
  task2();
 550:	0e 94 1a 01 	call	0x234	; 0x234 <task2>
    {
      task2_tramp();
    }
    else
    {
      playSong();
 554:	0e 94 54 02 	call	0x4a8	; 0x4a8 <playSong>
      longjmp( task2_jb, 1 );
 558:	61 e0       	ldi	r22, 0x01	; 1
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	84 e8       	ldi	r24, 0x84	; 132
 55e:	91 e0       	ldi	r25, 0x01	; 1
 560:	0e 94 80 06 	call	0xd00	; 0xd00 <longjmp>

00000564 <InitTimer0>:

int InitTimer0( uint8_t preScalar ) {
  uint8_t preScalarMask = ~( ( 1 << CS02 ) | ( 1 << CS01 ) | ( 1 << CS00 ) );
  uint8_t wgmMask = ~( ( 1 << WGM01 ) | ( 1 << WGM00 ) );
  uint8_t ocMask = ~ ( ( 1 << COM0A1 ) | ( 1 << COM0A0 ) );
  TCCR0A = ( TCCR0A & ( preScalarMask & wgmMask & ocMask ) ) | preScalar;
 564:	94 b5       	in	r25, 0x24	; 36
 566:	90 78       	andi	r25, 0x80	; 128
 568:	98 2b       	or	r25, r24
 56a:	94 bd       	out	0x24, r25	; 36
  
  TCNT0 = 0;
 56c:	16 bc       	out	0x26, r1	; 38
  TIFR0 = TIFR0 & ~( ( 1 << TOV0 ) | ( 1 << OCF0A ) );
 56e:	85 b3       	in	r24, 0x15	; 21
 570:	8c 7f       	andi	r24, 0xFC	; 252
 572:	85 bb       	out	0x15, r24	; 21
  //Enable interrupts
  TIMSK0 = ( TIMSK0 & ~( 1 << OCIE0A ) ) | ( 1 << TOIE0 );
 574:	ee e6       	ldi	r30, 0x6E	; 110
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	80 81       	ld	r24, Z
 57a:	8c 7f       	andi	r24, 0xFC	; 252
 57c:	81 60       	ori	r24, 0x01	; 1
 57e:	80 83       	st	Z, r24
  
  return 0;
}
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	08 95       	ret

00000586 <dynamic_delay>:

void dynamic_delay( uint16_t count )
{
  while( count-- )
 586:	00 97       	sbiw	r24, 0x00	; 0
 588:	41 f0       	breq	.+16     	; 0x59a <dynamic_delay+0x14>
 58a:	e3 ef       	ldi	r30, 0xF3	; 243
 58c:	f1 e0       	ldi	r31, 0x01	; 1
 58e:	31 97       	sbiw	r30, 0x01	; 1
 590:	f1 f7       	brne	.-4      	; 0x58e <dynamic_delay+0x8>
 592:	00 c0       	rjmp	.+0      	; 0x594 <dynamic_delay+0xe>
 594:	00 00       	nop
 596:	01 97       	sbiw	r24, 0x01	; 1
 598:	f6 cf       	rjmp	.-20     	; 0x586 <dynamic_delay>
  {
    _delay_ms(1);
  }
}
 59a:	08 95       	ret

0000059c <InitButterfly>:

int InitButterfly( void )
{
  PCMSK0 = 0x00;
 59c:	10 92 6b 00 	sts	0x006B, r1
  PCMSK1 = 0x00;
 5a0:	10 92 6c 00 	sts	0x006C, r1

  DIDR0 = 0x00;
 5a4:	10 92 7e 00 	sts	0x007E, r1
  DIDR1 = 0x00;
 5a8:	10 92 7f 00 	sts	0x007F, r1
  return 0;
}
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	08 95       	ret

000005b2 <InitSound>:

int InitSound( void )
{
  // Enable PortB5 output
  DDRB = DDRB | ( 1 << PB5 );
 5b2:	25 9a       	sbi	0x04, 5	; 4
  // Set output pin Port B5 to 0
  PORTB = ( PORTB & ( ~ ( 1 << PB5 ) ) ) | ( 0 << PB5 );
 5b4:	2d 98       	cbi	0x05, 5	; 5
  // Enable output compare toggle mode
  TCCR1A = ( TCCR1A & (~ ( ( 1 << COM1A1 ) | (1 << COM1A0) ) ) ) | ( ( 1 << COM1A1 ) | ( 0 << COM1A0 ) );
 5b6:	a0 e8       	ldi	r26, 0x80	; 128
 5b8:	b0 e0       	ldi	r27, 0x00	; 0
 5ba:	8c 91       	ld	r24, X
 5bc:	8f 73       	andi	r24, 0x3F	; 63
 5be:	80 68       	ori	r24, 0x80	; 128
 5c0:	8c 93       	st	X, r24
  // Enable phase and frequency correct mode, WGM=1000
  TCCR1B = ( TCCR1B & (~ ( ( 1 << WGM13 ) | (1 << WGM12) ) ) ) | ( ( 1 << WGM13 ) | ( 0 << WGM12 ) );
 5c2:	e1 e8       	ldi	r30, 0x81	; 129
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	80 81       	ld	r24, Z
 5c8:	87 7e       	andi	r24, 0xE7	; 231
 5ca:	80 61       	ori	r24, 0x10	; 16
 5cc:	80 83       	st	Z, r24
  TCCR1A = ( TCCR1A & (~ ( ( 1 << WGM11 ) | (1 << WGM10) ) ) ) | ( ( 0 << WGM11 ) | ( 0 << WGM10 ) );
 5ce:	8c 91       	ld	r24, X
 5d0:	8c 7f       	andi	r24, 0xFC	; 252
 5d2:	8c 93       	st	X, r24

  // Set clock to prescalar of 1
  TCCR1B = ( TCCR1B & (~ ( ( 1 << CS12 ) | ( 1 << CS11 ) | ( 1 << CS10 ) ) ) ) | ( ( 0 << CS12 ) | ( 0 << CS11 ) | ( 1 << CS10 ) );
 5d4:	80 81       	ld	r24, Z
 5d6:	88 7f       	andi	r24, 0xF8	; 248
 5d8:	81 60       	ori	r24, 0x01	; 1
 5da:	80 83       	st	Z, r24
  return 0;
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	08 95       	ret

000005e2 <CHAR2BCD2>:
*                   The result is byte where the high and low nibbles
*                   contain the tens and ones of the input.
*****************************************************************************/
char CHAR2BCD2(char input)
{
    char high = 0;
 5e2:	20 e0       	ldi	r18, 0x00	; 0
    
    
    while (input >= 10)                 // Count tens
 5e4:	8a 30       	cpi	r24, 0x0A	; 10
 5e6:	18 f0       	brcs	.+6      	; 0x5ee <CHAR2BCD2+0xc>
    {
        high++;
 5e8:	2f 5f       	subi	r18, 0xFF	; 255
        input -= 10;
 5ea:	8a 50       	subi	r24, 0x0A	; 10
 5ec:	fb cf       	rjmp	.-10     	; 0x5e4 <CHAR2BCD2+0x2>
    }

    return  (high << 4) | input;        // Add ones and return answer
 5ee:	90 e1       	ldi	r25, 0x10	; 16
 5f0:	29 9f       	mul	r18, r25
 5f2:	90 01       	movw	r18, r0
 5f4:	11 24       	eor	r1, r1
}
 5f6:	82 2b       	or	r24, r18
 5f8:	08 95       	ret

000005fa <CHAR2BCD3>:
*****************************************************************************/
unsigned int CHAR2BCD3(char input)
{
    int high = 0;
        
    while (input >= 100)                // Count hundreds
 5fa:	84 36       	cpi	r24, 0x64	; 100
 5fc:	40 f0       	brcs	.+16     	; 0x60e <CHAR2BCD3+0x14>
    {
        high++;
        input -= 100;
 5fe:	9c e9       	ldi	r25, 0x9C	; 156
 600:	98 0f       	add	r25, r24
*****************************************************************************/
unsigned int CHAR2BCD3(char input)
{
    int high = 0;
        
    while (input >= 100)                // Count hundreds
 602:	94 36       	cpi	r25, 0x64	; 100
 604:	38 f0       	brcs	.+14     	; 0x614 <CHAR2BCD3+0x1a>
    {
        high++;
        input -= 100;
 606:	88 5c       	subi	r24, 0xC8	; 200
{
    int high = 0;
        
    while (input >= 100)                // Count hundreds
    {
        high++;
 608:	22 e0       	ldi	r18, 0x02	; 2
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	06 c0       	rjmp	.+12     	; 0x61a <CHAR2BCD3+0x20>
*                   contain the ones, tens and hundreds of the input.
*
*****************************************************************************/
unsigned int CHAR2BCD3(char input)
{
    int high = 0;
 60e:	20 e0       	ldi	r18, 0x00	; 0
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	03 c0       	rjmp	.+6      	; 0x61a <CHAR2BCD3+0x20>
        
    while (input >= 100)                // Count hundreds
 614:	89 2f       	mov	r24, r25
    {
        high++;
 616:	21 e0       	ldi	r18, 0x01	; 1
 618:	30 e0       	ldi	r19, 0x00	; 0
        input -= 100;
    }

    high <<= 4;
 61a:	44 e0       	ldi	r20, 0x04	; 4
 61c:	22 0f       	add	r18, r18
 61e:	33 1f       	adc	r19, r19
 620:	4a 95       	dec	r20
 622:	e1 f7       	brne	.-8      	; 0x61c <CHAR2BCD3+0x22>
    
    while (input >= 10)                 // Count tens
 624:	8a 30       	cpi	r24, 0x0A	; 10
 626:	20 f0       	brcs	.+8      	; 0x630 <CHAR2BCD3+0x36>
    {
        high++;
 628:	2f 5f       	subi	r18, 0xFF	; 255
 62a:	3f 4f       	sbci	r19, 0xFF	; 255
        input -= 10;
 62c:	8a 50       	subi	r24, 0x0A	; 10
 62e:	fa cf       	rjmp	.-12     	; 0x624 <CHAR2BCD3+0x2a>
    }

    return  (high << 4) | input;        // Add ones and return answer
 630:	94 e0       	ldi	r25, 0x04	; 4
 632:	22 0f       	add	r18, r18
 634:	33 1f       	adc	r19, r19
 636:	9a 95       	dec	r25
 638:	e1 f7       	brne	.-8      	; 0x632 <CHAR2BCD3+0x38>
}
 63a:	a9 01       	movw	r20, r18
 63c:	48 2b       	or	r20, r24
 63e:	ca 01       	movw	r24, r20
 640:	08 95       	ret

00000642 <LCD_puts_f>:
void LCD_puts_f(const char *pFlashStr, char scrollmode)
{
    // char i;
	uint8_t i;

    while (gLCD_Update_Required);      // Wait for access to buffer
 642:	20 91 53 01 	lds	r18, 0x0153
 646:	21 11       	cpse	r18, r1
 648:	fc cf       	rjmp	.-8      	; 0x642 <LCD_puts_f>
 64a:	a6 ed       	ldi	r26, 0xD6	; 214
 64c:	b1 e0       	ldi	r27, 0x01	; 1
 64e:	20 e0       	ldi	r18, 0x00	; 0
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	42 2f       	mov	r20, r18
 654:	fc 01       	movw	r30, r24
 656:	e2 0f       	add	r30, r18
 658:	f3 1f       	adc	r31, r19

    // mt: for (i = 0; pFlashStr[i] && i < TEXTBUFFER_SIZE; i++)
	for (i = 0; pgm_read_byte(&pFlashStr[i]) && i < TEXTBUFFER_SIZE; i++)
 65a:	e4 91       	lpm	r30, Z
 65c:	ee 23       	and	r30, r30
 65e:	41 f0       	breq	.+16     	; 0x670 <LCD_puts_f+0x2e>
 660:	2f 5f       	subi	r18, 0xFF	; 255
 662:	3f 4f       	sbci	r19, 0xFF	; 255
 664:	2a 31       	cpi	r18, 0x1A	; 26
 666:	31 05       	cpc	r19, r1
 668:	11 f0       	breq	.+4      	; 0x66e <LCD_puts_f+0x2c>
    {
        // mt: gTextBuffer[i] = pFlashStr[i];
		gTextBuffer[i] = pgm_read_byte(&pFlashStr[i]);
 66a:	ed 93       	st	X+, r30
 66c:	f2 cf       	rjmp	.-28     	; 0x652 <LCD_puts_f+0x10>
 66e:	49 e1       	ldi	r20, 0x19	; 25
    }

    gTextBuffer[i] = '\0';
 670:	e4 2f       	mov	r30, r20
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	ea 52       	subi	r30, 0x2A	; 42
 676:	fe 4f       	sbci	r31, 0xFE	; 254
 678:	10 82       	st	Z, r1

    if (i > 6)
 67a:	47 30       	cpi	r20, 0x07	; 7
 67c:	48 f0       	brcs	.+18     	; 0x690 <LCD_puts_f+0x4e>
    {
        gScrollMode = 1;        // Scroll if text is longer than display size
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	80 93 c1 01 	sts	0x01C1, r24
        gScroll = 0;
 684:	10 92 ef 01 	sts	0x01EF, r1
        gLCD_Start_Scroll_Timer = 3;    //Start-up delay before scrolling the text
 688:	83 e0       	ldi	r24, 0x03	; 3
 68a:	80 93 52 01 	sts	0x0152, r24
 68e:	04 c0       	rjmp	.+8      	; 0x698 <LCD_puts_f+0x56>
    }
    else
    {
        gScrollMode = 0;        
 690:	10 92 c1 01 	sts	0x01C1, r1
        gScroll = 0;
 694:	10 92 ef 01 	sts	0x01EF, r1
    }

    gLCD_Update_Required = 1;
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	80 93 53 01 	sts	0x0153, r24
 69e:	08 95       	ret

000006a0 <LCD_puts>:
*****************************************************************************/
void LCD_puts(char *pStr, char scrollmode)
{
	uint8_t i; // char i;
	
	while (gLCD_Update_Required);      // Wait for access to buffer
 6a0:	20 91 53 01 	lds	r18, 0x0153
 6a4:	21 11       	cpse	r18, r1
 6a6:	fc cf       	rjmp	.-8      	; 0x6a0 <LCD_puts>
 6a8:	fc 01       	movw	r30, r24
 6aa:	a6 ed       	ldi	r26, 0xD6	; 214
 6ac:	b1 e0       	ldi	r27, 0x01	; 1
 6ae:	80 e0       	ldi	r24, 0x00	; 0

    for (i = 0; pStr[i] && i < TEXTBUFFER_SIZE; i++)
 6b0:	91 91       	ld	r25, Z+
 6b2:	99 23       	and	r25, r25
 6b4:	29 f0       	breq	.+10     	; 0x6c0 <LCD_puts+0x20>
 6b6:	89 31       	cpi	r24, 0x19	; 25
 6b8:	19 f0       	breq	.+6      	; 0x6c0 <LCD_puts+0x20>
    {
        gTextBuffer[i] = pStr[i];
 6ba:	9d 93       	st	X+, r25
{
	uint8_t i; // char i;
	
	while (gLCD_Update_Required);      // Wait for access to buffer

    for (i = 0; pStr[i] && i < TEXTBUFFER_SIZE; i++)
 6bc:	8f 5f       	subi	r24, 0xFF	; 255
 6be:	f8 cf       	rjmp	.-16     	; 0x6b0 <LCD_puts+0x10>
    {
        gTextBuffer[i] = pStr[i];
    }

    gTextBuffer[i] = '\0';
 6c0:	e8 2f       	mov	r30, r24
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	ea 52       	subi	r30, 0x2A	; 42
 6c6:	fe 4f       	sbci	r31, 0xFE	; 254
 6c8:	10 82       	st	Z, r1

    if (i > 6)
 6ca:	87 30       	cpi	r24, 0x07	; 7
 6cc:	48 f0       	brcs	.+18     	; 0x6e0 <LCD_puts+0x40>
    {
        gScrollMode = 1;        // Scroll if text is longer than display size
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	80 93 c1 01 	sts	0x01C1, r24
        gScroll = 0;
 6d4:	10 92 ef 01 	sts	0x01EF, r1
        gLCD_Start_Scroll_Timer = 3;    //Start-up delay before scrolling the text
 6d8:	83 e0       	ldi	r24, 0x03	; 3
 6da:	80 93 52 01 	sts	0x0152, r24
 6de:	04 c0       	rjmp	.+8      	; 0x6e8 <LCD_puts+0x48>
    }
    else
    {
        gScrollMode = 0;        
 6e0:	10 92 c1 01 	sts	0x01C1, r1
        gScroll = 0;
 6e4:	10 92 ef 01 	sts	0x01EF, r1
    }

    gLCD_Update_Required = 1;
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	80 93 53 01 	sts	0x0153, r24
 6ee:	08 95       	ret

000006f0 <LCD_putc>:
*****************************************************************************/
// mt void LCD_putc(char digit, char character)
// mt void LCD_putc(char digit, char character)
void LCD_putc(uint8_t digit, char character)
{
    if (digit < TEXTBUFFER_SIZE)
 6f0:	89 31       	cpi	r24, 0x19	; 25
 6f2:	28 f4       	brcc	.+10     	; 0x6fe <LCD_putc+0xe>
        gTextBuffer[digit] = character;
 6f4:	e8 2f       	mov	r30, r24
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	ea 52       	subi	r30, 0x2A	; 42
 6fa:	fe 4f       	sbci	r31, 0xFE	; 254
 6fc:	60 83       	st	Z, r22
 6fe:	08 95       	ret

00000700 <LCD_Clear>:
*
*	Purpose :		Clear the LCD
*
*****************************************************************************/
void LCD_Clear(void)
{
 700:	e6 ed       	ldi	r30, 0xD6	; 214
 702:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t i; // char i;
	   
    for (i=0; i<TEXTBUFFER_SIZE; i++)
        gTextBuffer[i] = ' ';
 704:	80 e2       	ldi	r24, 0x20	; 32
 706:	81 93       	st	Z+, r24
*****************************************************************************/
void LCD_Clear(void)
{
    uint8_t i; // char i;
	   
    for (i=0; i<TEXTBUFFER_SIZE; i++)
 708:	91 e0       	ldi	r25, 0x01	; 1
 70a:	ef 3e       	cpi	r30, 0xEF	; 239
 70c:	f9 07       	cpc	r31, r25
 70e:	d9 f7       	brne	.-10     	; 0x706 <LCD_Clear+0x6>
        gTextBuffer[i] = ' ';
}
 710:	08 95       	ret

00000712 <LCD_Colon>:
*	Purpose :		Enable/disable colons on the LCD
*
*****************************************************************************/
void LCD_Colon(char show)
{
    gColon = show;
 712:	80 93 50 01 	sts	0x0150, r24
 716:	08 95       	ret

00000718 <LCD_UpdateRequired>:
*
*****************************************************************************/
void LCD_UpdateRequired(char update, char scrollmode)
{

    while (gLCD_Update_Required);
 718:	90 91 53 01 	lds	r25, 0x0153
 71c:	91 11       	cpse	r25, r1
 71e:	fc cf       	rjmp	.-8      	; 0x718 <LCD_UpdateRequired>
    
    gScrollMode = scrollmode;
 720:	60 93 c1 01 	sts	0x01C1, r22
    gScroll = 0;
 724:	10 92 ef 01 	sts	0x01EF, r1

    gLCD_Update_Required = update;
 728:	80 93 53 01 	sts	0x0153, r24
 72c:	08 95       	ret

0000072e <LCD_FlashReset>:
*	Purpose :		This function resets the blinking cycle of a flashing digit
*
*****************************************************************************/
void LCD_FlashReset(void)
{
    gFlashTimer = 0;
 72e:	10 92 51 01 	sts	0x0151, r1
 732:	08 95       	ret

00000734 <LCD_WriteDigit>:
    char mask, nibble;
    char *ptr;
    char i;


    if (digit > 5)                              // Skip if digit is illegal
 734:	66 30       	cpi	r22, 0x06	; 6
 736:	a0 f5       	brcc	.+104    	; 0x7a0 <LCD_WriteDigit+0x6c>
        return;

    //Lookup character table for segmet data
    if ((c >= '*') && (c <= 'z'))
 738:	96 ed       	ldi	r25, 0xD6	; 214
 73a:	98 0f       	add	r25, r24
 73c:	91 35       	cpi	r25, 0x51	; 81
 73e:	68 f4       	brcc	.+26     	; 0x75a <LCD_WriteDigit+0x26>
    {
        // c is a letter
        if (c >= 'a')                           // Convert to upper case
 740:	81 36       	cpi	r24, 0x61	; 97
 742:	08 f0       	brcs	.+2      	; 0x746 <LCD_WriteDigit+0x12>
            c &= ~0x20;                         // if necessarry
 744:	8f 7d       	andi	r24, 0xDF	; 223

        c -= '*';
 746:	8a 52       	subi	r24, 0x2A	; 42

		//mt seg = LCD_character_table[c];
		seg = (unsigned int) pgm_read_word(&LCD_character_table[(uint8_t)c]); 
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	88 0f       	add	r24, r24
 74c:	99 1f       	adc	r25, r25
 74e:	82 59       	subi	r24, 0x92	; 146
 750:	9f 4f       	sbci	r25, 0xFF	; 255
 752:	fc 01       	movw	r30, r24
 754:	25 91       	lpm	r18, Z+
 756:	34 91       	lpm	r19, Z
 758:	02 c0       	rjmp	.+4      	; 0x75e <LCD_WriteDigit+0x2a>
*
*****************************************************************************/
void LCD_WriteDigit(char c, char digit)
{

    unsigned int seg = 0x0000;                  // Holds the segment pattern
 75a:	20 e0       	ldi	r18, 0x00	; 0
 75c:	30 e0       	ldi	r19, 0x00	; 0
		//mt seg = LCD_character_table[c];
		seg = (unsigned int) pgm_read_word(&LCD_character_table[(uint8_t)c]); 
	}

    // Adjust mask according to LCD segment mapping
    if (digit & 0x01)
 75e:	a6 2f       	mov	r26, r22
 760:	a1 70       	andi	r26, 0x01	; 1
 762:	60 ff       	sbrs	r22, 0
 764:	02 c0       	rjmp	.+4      	; 0x76a <LCD_WriteDigit+0x36>
        mask = 0x0F;                // Digit 1, 3, 5
 766:	7f e0       	ldi	r23, 0x0F	; 15
 768:	01 c0       	rjmp	.+2      	; 0x76c <LCD_WriteDigit+0x38>
    else
        mask = 0xF0;                // Digit 0, 2, 4
 76a:	70 ef       	ldi	r23, 0xF0	; 240

    ptr = LCD_Data + (digit >> 1);  // digit = {0,0,1,1,2,2}
 76c:	66 95       	lsr	r22
 76e:	e6 2f       	mov	r30, r22
 770:	f0 e0       	ldi	r31, 0x00	; 0
 772:	ee 53       	subi	r30, 0x3E	; 62
 774:	fe 4f       	sbci	r31, 0xFE	; 254
 776:	cf 01       	movw	r24, r30
 778:	44 96       	adiw	r24, 0x14	; 20

    for (i = 0; i < 4; i++)
    {
        nibble = seg & 0x000F;
 77a:	52 2f       	mov	r21, r18
 77c:	5f 70       	andi	r21, 0x0F	; 15
        seg >>= 4;
 77e:	44 e0       	ldi	r20, 0x04	; 4
 780:	36 95       	lsr	r19
 782:	27 95       	ror	r18
 784:	4a 95       	dec	r20
 786:	e1 f7       	brne	.-8      	; 0x780 <LCD_WriteDigit+0x4c>
        if (digit & 0x01)
 788:	aa 23       	and	r26, r26
 78a:	11 f0       	breq	.+4      	; 0x790 <LCD_WriteDigit+0x5c>
            nibble <<= 4;
 78c:	52 95       	swap	r21
 78e:	50 7f       	andi	r21, 0xF0	; 240
        *ptr = (*ptr & mask) | nibble;
 790:	40 81       	ld	r20, Z
 792:	47 23       	and	r20, r23
 794:	45 2b       	or	r20, r21
 796:	40 83       	st	Z, r20
        ptr += 5;
 798:	35 96       	adiw	r30, 0x05	; 5
    else
        mask = 0xF0;                // Digit 0, 2, 4

    ptr = LCD_Data + (digit >> 1);  // digit = {0,0,1,1,2,2}

    for (i = 0; i < 4; i++)
 79a:	e8 17       	cp	r30, r24
 79c:	f9 07       	cpc	r31, r25
 79e:	69 f7       	brne	.-38     	; 0x77a <LCD_WriteDigit+0x46>
 7a0:	08 95       	ret

000007a2 <LCD_AllSegments>:
*****************************************************************************/
void LCD_AllSegments(char show)
{
    unsigned char i;

    if (show)
 7a2:	91 e0       	ldi	r25, 0x01	; 1
 7a4:	81 11       	cpse	r24, r1
 7a6:	01 c0       	rjmp	.+2      	; 0x7aa <LCD_AllSegments+0x8>
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	91 95       	neg	r25
 7ac:	e2 ec       	ldi	r30, 0xC2	; 194
 7ae:	f1 e0       	ldi	r31, 0x01	; 1
        show = 0xFF;

    // Set/clear all bits in all LCD registers
    for (i=0; i < LCD_REGISTER_COUNT; i++)
        *(LCD_Data + i) = show;
 7b0:	91 93       	st	Z+, r25

    if (show)
        show = 0xFF;

    // Set/clear all bits in all LCD registers
    for (i=0; i < LCD_REGISTER_COUNT; i++)
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	e6 3d       	cpi	r30, 0xD6	; 214
 7b6:	f8 07       	cpc	r31, r24
 7b8:	d9 f7       	brne	.-10     	; 0x7b0 <LCD_AllSegments+0xe>
        *(LCD_Data + i) = show;
}
 7ba:	08 95       	ret

000007bc <LCD_Init>:
*                   Set up the LCD (timing, contrast, etc.)
*
*****************************************************************************/
void LCD_Init (void)
{
    LCD_AllSegments(FALSE);                     // Clear segment buffer.
 7bc:	80 e0       	ldi	r24, 0x00	; 0
 7be:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <LCD_AllSegments>

    LCD_CONTRAST_LEVEL(LCD_INITIAL_CONTRAST);    //Set the LCD contrast level
 7c2:	8f e0       	ldi	r24, 0x0F	; 15
 7c4:	80 93 e7 00 	sts	0x00E7, r24

    // Select asynchronous clock source, enable all COM pins and enable all
    // segment pins.
    LCDCRB = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0);
 7c8:	87 eb       	ldi	r24, 0xB7	; 183
 7ca:	80 93 e5 00 	sts	0x00E5, r24

    // Set LCD prescaler to give a framerate of 32,0 Hz
    LCDFRR = (0<<LCDPS0) | (7<<LCDCD0);    
 7ce:	87 e0       	ldi	r24, 0x07	; 7
 7d0:	80 93 e6 00 	sts	0x00E6, r24

    LCDCRA = (1<<LCDEN) | (1<<LCDAB);           // Enable LCD and set low power waveform
 7d4:	e4 ee       	ldi	r30, 0xE4	; 228
 7d6:	f0 e0       	ldi	r31, 0x00	; 0
 7d8:	80 ec       	ldi	r24, 0xC0	; 192
 7da:	80 83       	st	Z, r24

    //Enable LCD start of frame interrupt
    LCDCRA |= (1<<LCDIE);
 7dc:	80 81       	ld	r24, Z
 7de:	88 60       	ori	r24, 0x08	; 8
 7e0:	80 83       	st	Z, r24

    gLCD_Update_Required = FALSE;
 7e2:	10 92 53 01 	sts	0x0153, r1
 7e6:	08 95       	ret

000007e8 <__vector_22>:
 7e8:	78 94       	sei
 7ea:	1f 92       	push	r1
 7ec:	0f 92       	push	r0
 7ee:	0f b6       	in	r0, 0x3f	; 63
 7f0:	0f 92       	push	r0
 7f2:	11 24       	eor	r1, r1
 7f4:	ff 92       	push	r15
 7f6:	0f 93       	push	r16
 7f8:	1f 93       	push	r17
 7fa:	2f 93       	push	r18
 7fc:	3f 93       	push	r19
 7fe:	4f 93       	push	r20
 800:	5f 93       	push	r21
 802:	6f 93       	push	r22
 804:	7f 93       	push	r23
 806:	8f 93       	push	r24
 808:	9f 93       	push	r25
 80a:	af 93       	push	r26
 80c:	bf 93       	push	r27
 80e:	cf 93       	push	r28
 810:	df 93       	push	r29
 812:	ef 93       	push	r30
 814:	ff 93       	push	r31
 816:	80 91 4f 01 	lds	r24, 0x014F
 81a:	81 50       	subi	r24, 0x01	; 1
 81c:	80 93 4f 01 	sts	0x014F, r24
 820:	90 91 c1 01 	lds	r25, 0x01C1
 824:	99 23       	and	r25, r25
 826:	71 f0       	breq	.+28     	; 0x844 <__vector_22+0x5c>
 828:	81 11       	cpse	r24, r1
 82a:	0e c0       	rjmp	.+28     	; 0x848 <__vector_22+0x60>
 82c:	80 91 52 01 	lds	r24, 0x0152
 830:	81 11       	cpse	r24, r1
 832:	04 c0       	rjmp	.+8      	; 0x83c <__vector_22+0x54>
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	80 93 53 01 	sts	0x0153, r24
 83a:	06 c0       	rjmp	.+12     	; 0x848 <__vector_22+0x60>
 83c:	81 50       	subi	r24, 0x01	; 1
 83e:	80 93 52 01 	sts	0x0152, r24
 842:	02 c0       	rjmp	.+4      	; 0x848 <__vector_22+0x60>
 844:	10 92 ef 01 	sts	0x01EF, r1
 848:	80 91 53 01 	lds	r24, 0x0153
 84c:	81 30       	cpi	r24, 0x01	; 1
 84e:	09 f0       	breq	.+2      	; 0x852 <__vector_22+0x6a>
 850:	51 c0       	rjmp	.+162    	; 0x8f4 <__vector_22+0x10c>
 852:	f0 90 51 01 	lds	r15, 0x0151
 856:	c0 e0       	ldi	r28, 0x00	; 0
 858:	d0 e0       	ldi	r29, 0x00	; 0
 85a:	10 e0       	ldi	r17, 0x00	; 0
 85c:	00 e0       	ldi	r16, 0x00	; 0
 85e:	6c 2f       	mov	r22, r28
 860:	80 91 ef 01 	lds	r24, 0x01EF
 864:	9e 01       	movw	r18, r28
 866:	28 0f       	add	r18, r24
 868:	31 1d       	adc	r19, r1
 86a:	87 fd       	sbrc	r24, 7
 86c:	3a 95       	dec	r19
 86e:	37 fd       	sbrc	r19, 7
 870:	15 c0       	rjmp	.+42     	; 0x89c <__vector_22+0xb4>
 872:	11 11       	cpse	r17, r1
 874:	13 c0       	rjmp	.+38     	; 0x89c <__vector_22+0xb4>
 876:	80 91 ef 01 	lds	r24, 0x01EF
 87a:	fe 01       	movw	r30, r28
 87c:	ea 52       	subi	r30, 0x2A	; 42
 87e:	fe 4f       	sbci	r31, 0xFE	; 254
 880:	e8 0f       	add	r30, r24
 882:	f1 1d       	adc	r31, r1
 884:	87 fd       	sbrc	r24, 7
 886:	fa 95       	dec	r31
 888:	80 81       	ld	r24, Z
 88a:	08 2f       	mov	r16, r24
 88c:	00 1f       	adc	r16, r16
 88e:	00 27       	eor	r16, r16
 890:	00 1f       	adc	r16, r16
 892:	8f 77       	andi	r24, 0x7F	; 127
 894:	21 f4       	brne	.+8      	; 0x89e <__vector_22+0xb6>
 896:	11 e0       	ldi	r17, 0x01	; 1
 898:	1c 0f       	add	r17, r28
 89a:	01 c0       	rjmp	.+2      	; 0x89e <__vector_22+0xb6>
 89c:	80 e2       	ldi	r24, 0x20	; 32
 89e:	00 23       	and	r16, r16
 8a0:	21 f0       	breq	.+8      	; 0x8aa <__vector_22+0xc2>
 8a2:	34 e0       	ldi	r19, 0x04	; 4
 8a4:	3f 15       	cp	r19, r15
 8a6:	08 f4       	brcc	.+2      	; 0x8aa <__vector_22+0xc2>
 8a8:	80 e2       	ldi	r24, 0x20	; 32
 8aa:	0e 94 9a 03 	call	0x734	; 0x734 <LCD_WriteDigit>
 8ae:	21 96       	adiw	r28, 0x01	; 1
 8b0:	c6 30       	cpi	r28, 0x06	; 6
 8b2:	d1 05       	cpc	r29, r1
 8b4:	a1 f6       	brne	.-88     	; 0x85e <__vector_22+0x76>
 8b6:	a2 ec       	ldi	r26, 0xC2	; 194
 8b8:	b1 e0       	ldi	r27, 0x01	; 1
 8ba:	ec ee       	ldi	r30, 0xEC	; 236
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	8d 91       	ld	r24, X+
 8c0:	81 93       	st	Z+, r24
 8c2:	e1 15       	cp	r30, r1
 8c4:	81 e0       	ldi	r24, 0x01	; 1
 8c6:	f8 07       	cpc	r31, r24
 8c8:	d1 f7       	brne	.-12     	; 0x8be <__vector_22+0xd6>
 8ca:	80 91 50 01 	lds	r24, 0x0150
 8ce:	88 23       	and	r24, r24
 8d0:	21 f0       	breq	.+8      	; 0x8da <__vector_22+0xf2>
 8d2:	81 e0       	ldi	r24, 0x01	; 1
 8d4:	80 93 f4 00 	sts	0x00F4, r24
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <__vector_22+0xf6>
 8da:	10 92 f4 00 	sts	0x00F4, r1
 8de:	11 30       	cpi	r17, 0x01	; 1
 8e0:	11 f4       	brne	.+4      	; 0x8e6 <__vector_22+0xfe>
 8e2:	8a ef       	ldi	r24, 0xFA	; 250
 8e4:	03 c0       	rjmp	.+6      	; 0x8ec <__vector_22+0x104>
 8e6:	80 91 ef 01 	lds	r24, 0x01EF
 8ea:	8f 5f       	subi	r24, 0xFF	; 255
 8ec:	80 93 ef 01 	sts	0x01EF, r24
 8f0:	10 92 53 01 	sts	0x0153, r1
 8f4:	80 91 4f 01 	lds	r24, 0x014F
 8f8:	81 11       	cpse	r24, r1
 8fa:	03 c0       	rjmp	.+6      	; 0x902 <__vector_22+0x11a>
 8fc:	83 e0       	ldi	r24, 0x03	; 3
 8fe:	80 93 4f 01 	sts	0x014F, r24
 902:	80 91 51 01 	lds	r24, 0x0151
 906:	8a 30       	cpi	r24, 0x0A	; 10
 908:	19 f4       	brne	.+6      	; 0x910 <__vector_22+0x128>
 90a:	10 92 51 01 	sts	0x0151, r1
 90e:	03 c0       	rjmp	.+6      	; 0x916 <__vector_22+0x12e>
 910:	8f 5f       	subi	r24, 0xFF	; 255
 912:	80 93 51 01 	sts	0x0151, r24
 916:	ff 91       	pop	r31
 918:	ef 91       	pop	r30
 91a:	df 91       	pop	r29
 91c:	cf 91       	pop	r28
 91e:	bf 91       	pop	r27
 920:	af 91       	pop	r26
 922:	9f 91       	pop	r25
 924:	8f 91       	pop	r24
 926:	7f 91       	pop	r23
 928:	6f 91       	pop	r22
 92a:	5f 91       	pop	r21
 92c:	4f 91       	pop	r20
 92e:	3f 91       	pop	r19
 930:	2f 91       	pop	r18
 932:	1f 91       	pop	r17
 934:	0f 91       	pop	r16
 936:	ff 90       	pop	r15
 938:	0f 90       	pop	r0
 93a:	0f be       	out	0x3f, r0	; 63
 93c:	0f 90       	pop	r0
 93e:	1f 90       	pop	r1
 940:	18 95       	reti

00000942 <main>:
 942:	f8 94       	cli
 944:	0e 94 ce 02 	call	0x59c	; 0x59c <InitButterfly>
 948:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_Init>
 94c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <InitSound>
 950:	78 94       	sei
 952:	0e 94 9e 02 	call	0x53c	; 0x53c <task1>

00000956 <__subsf3>:
 956:	50 58       	subi	r21, 0x80	; 128

00000958 <__addsf3>:
 958:	bb 27       	eor	r27, r27
 95a:	aa 27       	eor	r26, r26
 95c:	0e d0       	rcall	.+28     	; 0x97a <__addsf3x>
 95e:	48 c1       	rjmp	.+656    	; 0xbf0 <__fp_round>
 960:	39 d1       	rcall	.+626    	; 0xbd4 <__fp_pscA>
 962:	30 f0       	brcs	.+12     	; 0x970 <__addsf3+0x18>
 964:	3e d1       	rcall	.+636    	; 0xbe2 <__fp_pscB>
 966:	20 f0       	brcs	.+8      	; 0x970 <__addsf3+0x18>
 968:	31 f4       	brne	.+12     	; 0x976 <__addsf3+0x1e>
 96a:	9f 3f       	cpi	r25, 0xFF	; 255
 96c:	11 f4       	brne	.+4      	; 0x972 <__addsf3+0x1a>
 96e:	1e f4       	brtc	.+6      	; 0x976 <__addsf3+0x1e>
 970:	2e c1       	rjmp	.+604    	; 0xbce <__fp_nan>
 972:	0e f4       	brtc	.+2      	; 0x976 <__addsf3+0x1e>
 974:	e0 95       	com	r30
 976:	e7 fb       	bst	r30, 7
 978:	24 c1       	rjmp	.+584    	; 0xbc2 <__fp_inf>

0000097a <__addsf3x>:
 97a:	e9 2f       	mov	r30, r25
 97c:	4a d1       	rcall	.+660    	; 0xc12 <__fp_split3>
 97e:	80 f3       	brcs	.-32     	; 0x960 <__addsf3+0x8>
 980:	ba 17       	cp	r27, r26
 982:	62 07       	cpc	r22, r18
 984:	73 07       	cpc	r23, r19
 986:	84 07       	cpc	r24, r20
 988:	95 07       	cpc	r25, r21
 98a:	18 f0       	brcs	.+6      	; 0x992 <__addsf3x+0x18>
 98c:	71 f4       	brne	.+28     	; 0x9aa <__addsf3x+0x30>
 98e:	9e f5       	brtc	.+102    	; 0x9f6 <__addsf3x+0x7c>
 990:	62 c1       	rjmp	.+708    	; 0xc56 <__fp_zero>
 992:	0e f4       	brtc	.+2      	; 0x996 <__addsf3x+0x1c>
 994:	e0 95       	com	r30
 996:	0b 2e       	mov	r0, r27
 998:	ba 2f       	mov	r27, r26
 99a:	a0 2d       	mov	r26, r0
 99c:	0b 01       	movw	r0, r22
 99e:	b9 01       	movw	r22, r18
 9a0:	90 01       	movw	r18, r0
 9a2:	0c 01       	movw	r0, r24
 9a4:	ca 01       	movw	r24, r20
 9a6:	a0 01       	movw	r20, r0
 9a8:	11 24       	eor	r1, r1
 9aa:	ff 27       	eor	r31, r31
 9ac:	59 1b       	sub	r21, r25
 9ae:	99 f0       	breq	.+38     	; 0x9d6 <__addsf3x+0x5c>
 9b0:	59 3f       	cpi	r21, 0xF9	; 249
 9b2:	50 f4       	brcc	.+20     	; 0x9c8 <__addsf3x+0x4e>
 9b4:	50 3e       	cpi	r21, 0xE0	; 224
 9b6:	68 f1       	brcs	.+90     	; 0xa12 <__addsf3x+0x98>
 9b8:	1a 16       	cp	r1, r26
 9ba:	f0 40       	sbci	r31, 0x00	; 0
 9bc:	a2 2f       	mov	r26, r18
 9be:	23 2f       	mov	r18, r19
 9c0:	34 2f       	mov	r19, r20
 9c2:	44 27       	eor	r20, r20
 9c4:	58 5f       	subi	r21, 0xF8	; 248
 9c6:	f3 cf       	rjmp	.-26     	; 0x9ae <__addsf3x+0x34>
 9c8:	46 95       	lsr	r20
 9ca:	37 95       	ror	r19
 9cc:	27 95       	ror	r18
 9ce:	a7 95       	ror	r26
 9d0:	f0 40       	sbci	r31, 0x00	; 0
 9d2:	53 95       	inc	r21
 9d4:	c9 f7       	brne	.-14     	; 0x9c8 <__addsf3x+0x4e>
 9d6:	7e f4       	brtc	.+30     	; 0x9f6 <__addsf3x+0x7c>
 9d8:	1f 16       	cp	r1, r31
 9da:	ba 0b       	sbc	r27, r26
 9dc:	62 0b       	sbc	r22, r18
 9de:	73 0b       	sbc	r23, r19
 9e0:	84 0b       	sbc	r24, r20
 9e2:	ba f0       	brmi	.+46     	; 0xa12 <__addsf3x+0x98>
 9e4:	91 50       	subi	r25, 0x01	; 1
 9e6:	a1 f0       	breq	.+40     	; 0xa10 <__addsf3x+0x96>
 9e8:	ff 0f       	add	r31, r31
 9ea:	bb 1f       	adc	r27, r27
 9ec:	66 1f       	adc	r22, r22
 9ee:	77 1f       	adc	r23, r23
 9f0:	88 1f       	adc	r24, r24
 9f2:	c2 f7       	brpl	.-16     	; 0x9e4 <__addsf3x+0x6a>
 9f4:	0e c0       	rjmp	.+28     	; 0xa12 <__addsf3x+0x98>
 9f6:	ba 0f       	add	r27, r26
 9f8:	62 1f       	adc	r22, r18
 9fa:	73 1f       	adc	r23, r19
 9fc:	84 1f       	adc	r24, r20
 9fe:	48 f4       	brcc	.+18     	; 0xa12 <__addsf3x+0x98>
 a00:	87 95       	ror	r24
 a02:	77 95       	ror	r23
 a04:	67 95       	ror	r22
 a06:	b7 95       	ror	r27
 a08:	f7 95       	ror	r31
 a0a:	9e 3f       	cpi	r25, 0xFE	; 254
 a0c:	08 f0       	brcs	.+2      	; 0xa10 <__addsf3x+0x96>
 a0e:	b3 cf       	rjmp	.-154    	; 0x976 <__addsf3+0x1e>
 a10:	93 95       	inc	r25
 a12:	88 0f       	add	r24, r24
 a14:	08 f0       	brcs	.+2      	; 0xa18 <__addsf3x+0x9e>
 a16:	99 27       	eor	r25, r25
 a18:	ee 0f       	add	r30, r30
 a1a:	97 95       	ror	r25
 a1c:	87 95       	ror	r24
 a1e:	08 95       	ret

00000a20 <__divsf3>:
 a20:	0c d0       	rcall	.+24     	; 0xa3a <__divsf3x>
 a22:	e6 c0       	rjmp	.+460    	; 0xbf0 <__fp_round>
 a24:	de d0       	rcall	.+444    	; 0xbe2 <__fp_pscB>
 a26:	40 f0       	brcs	.+16     	; 0xa38 <__divsf3+0x18>
 a28:	d5 d0       	rcall	.+426    	; 0xbd4 <__fp_pscA>
 a2a:	30 f0       	brcs	.+12     	; 0xa38 <__divsf3+0x18>
 a2c:	21 f4       	brne	.+8      	; 0xa36 <__divsf3+0x16>
 a2e:	5f 3f       	cpi	r21, 0xFF	; 255
 a30:	19 f0       	breq	.+6      	; 0xa38 <__divsf3+0x18>
 a32:	c7 c0       	rjmp	.+398    	; 0xbc2 <__fp_inf>
 a34:	51 11       	cpse	r21, r1
 a36:	10 c1       	rjmp	.+544    	; 0xc58 <__fp_szero>
 a38:	ca c0       	rjmp	.+404    	; 0xbce <__fp_nan>

00000a3a <__divsf3x>:
 a3a:	eb d0       	rcall	.+470    	; 0xc12 <__fp_split3>
 a3c:	98 f3       	brcs	.-26     	; 0xa24 <__divsf3+0x4>

00000a3e <__divsf3_pse>:
 a3e:	99 23       	and	r25, r25
 a40:	c9 f3       	breq	.-14     	; 0xa34 <__divsf3+0x14>
 a42:	55 23       	and	r21, r21
 a44:	b1 f3       	breq	.-20     	; 0xa32 <__divsf3+0x12>
 a46:	95 1b       	sub	r25, r21
 a48:	55 0b       	sbc	r21, r21
 a4a:	bb 27       	eor	r27, r27
 a4c:	aa 27       	eor	r26, r26
 a4e:	62 17       	cp	r22, r18
 a50:	73 07       	cpc	r23, r19
 a52:	84 07       	cpc	r24, r20
 a54:	38 f0       	brcs	.+14     	; 0xa64 <__divsf3_pse+0x26>
 a56:	9f 5f       	subi	r25, 0xFF	; 255
 a58:	5f 4f       	sbci	r21, 0xFF	; 255
 a5a:	22 0f       	add	r18, r18
 a5c:	33 1f       	adc	r19, r19
 a5e:	44 1f       	adc	r20, r20
 a60:	aa 1f       	adc	r26, r26
 a62:	a9 f3       	breq	.-22     	; 0xa4e <__divsf3_pse+0x10>
 a64:	33 d0       	rcall	.+102    	; 0xacc <__divsf3_pse+0x8e>
 a66:	0e 2e       	mov	r0, r30
 a68:	3a f0       	brmi	.+14     	; 0xa78 <__divsf3_pse+0x3a>
 a6a:	e0 e8       	ldi	r30, 0x80	; 128
 a6c:	30 d0       	rcall	.+96     	; 0xace <__divsf3_pse+0x90>
 a6e:	91 50       	subi	r25, 0x01	; 1
 a70:	50 40       	sbci	r21, 0x00	; 0
 a72:	e6 95       	lsr	r30
 a74:	00 1c       	adc	r0, r0
 a76:	ca f7       	brpl	.-14     	; 0xa6a <__divsf3_pse+0x2c>
 a78:	29 d0       	rcall	.+82     	; 0xacc <__divsf3_pse+0x8e>
 a7a:	fe 2f       	mov	r31, r30
 a7c:	27 d0       	rcall	.+78     	; 0xacc <__divsf3_pse+0x8e>
 a7e:	66 0f       	add	r22, r22
 a80:	77 1f       	adc	r23, r23
 a82:	88 1f       	adc	r24, r24
 a84:	bb 1f       	adc	r27, r27
 a86:	26 17       	cp	r18, r22
 a88:	37 07       	cpc	r19, r23
 a8a:	48 07       	cpc	r20, r24
 a8c:	ab 07       	cpc	r26, r27
 a8e:	b0 e8       	ldi	r27, 0x80	; 128
 a90:	09 f0       	breq	.+2      	; 0xa94 <__divsf3_pse+0x56>
 a92:	bb 0b       	sbc	r27, r27
 a94:	80 2d       	mov	r24, r0
 a96:	bf 01       	movw	r22, r30
 a98:	ff 27       	eor	r31, r31
 a9a:	93 58       	subi	r25, 0x83	; 131
 a9c:	5f 4f       	sbci	r21, 0xFF	; 255
 a9e:	2a f0       	brmi	.+10     	; 0xaaa <__divsf3_pse+0x6c>
 aa0:	9e 3f       	cpi	r25, 0xFE	; 254
 aa2:	51 05       	cpc	r21, r1
 aa4:	68 f0       	brcs	.+26     	; 0xac0 <__divsf3_pse+0x82>
 aa6:	8d c0       	rjmp	.+282    	; 0xbc2 <__fp_inf>
 aa8:	d7 c0       	rjmp	.+430    	; 0xc58 <__fp_szero>
 aaa:	5f 3f       	cpi	r21, 0xFF	; 255
 aac:	ec f3       	brlt	.-6      	; 0xaa8 <__divsf3_pse+0x6a>
 aae:	98 3e       	cpi	r25, 0xE8	; 232
 ab0:	dc f3       	brlt	.-10     	; 0xaa8 <__divsf3_pse+0x6a>
 ab2:	86 95       	lsr	r24
 ab4:	77 95       	ror	r23
 ab6:	67 95       	ror	r22
 ab8:	b7 95       	ror	r27
 aba:	f7 95       	ror	r31
 abc:	9f 5f       	subi	r25, 0xFF	; 255
 abe:	c9 f7       	brne	.-14     	; 0xab2 <__divsf3_pse+0x74>
 ac0:	88 0f       	add	r24, r24
 ac2:	91 1d       	adc	r25, r1
 ac4:	96 95       	lsr	r25
 ac6:	87 95       	ror	r24
 ac8:	97 f9       	bld	r25, 7
 aca:	08 95       	ret
 acc:	e1 e0       	ldi	r30, 0x01	; 1
 ace:	66 0f       	add	r22, r22
 ad0:	77 1f       	adc	r23, r23
 ad2:	88 1f       	adc	r24, r24
 ad4:	bb 1f       	adc	r27, r27
 ad6:	62 17       	cp	r22, r18
 ad8:	73 07       	cpc	r23, r19
 ada:	84 07       	cpc	r24, r20
 adc:	ba 07       	cpc	r27, r26
 ade:	20 f0       	brcs	.+8      	; 0xae8 <__divsf3_pse+0xaa>
 ae0:	62 1b       	sub	r22, r18
 ae2:	73 0b       	sbc	r23, r19
 ae4:	84 0b       	sbc	r24, r20
 ae6:	ba 0b       	sbc	r27, r26
 ae8:	ee 1f       	adc	r30, r30
 aea:	88 f7       	brcc	.-30     	; 0xace <__divsf3_pse+0x90>
 aec:	e0 95       	com	r30
 aee:	08 95       	ret

00000af0 <__fixunssfsi>:
 af0:	98 d0       	rcall	.+304    	; 0xc22 <__fp_splitA>
 af2:	88 f0       	brcs	.+34     	; 0xb16 <__fixunssfsi+0x26>
 af4:	9f 57       	subi	r25, 0x7F	; 127
 af6:	90 f0       	brcs	.+36     	; 0xb1c <__fixunssfsi+0x2c>
 af8:	b9 2f       	mov	r27, r25
 afa:	99 27       	eor	r25, r25
 afc:	b7 51       	subi	r27, 0x17	; 23
 afe:	a0 f0       	brcs	.+40     	; 0xb28 <__fixunssfsi+0x38>
 b00:	d1 f0       	breq	.+52     	; 0xb36 <__fixunssfsi+0x46>
 b02:	66 0f       	add	r22, r22
 b04:	77 1f       	adc	r23, r23
 b06:	88 1f       	adc	r24, r24
 b08:	99 1f       	adc	r25, r25
 b0a:	1a f0       	brmi	.+6      	; 0xb12 <__fixunssfsi+0x22>
 b0c:	ba 95       	dec	r27
 b0e:	c9 f7       	brne	.-14     	; 0xb02 <__fixunssfsi+0x12>
 b10:	12 c0       	rjmp	.+36     	; 0xb36 <__fixunssfsi+0x46>
 b12:	b1 30       	cpi	r27, 0x01	; 1
 b14:	81 f0       	breq	.+32     	; 0xb36 <__fixunssfsi+0x46>
 b16:	9f d0       	rcall	.+318    	; 0xc56 <__fp_zero>
 b18:	b1 e0       	ldi	r27, 0x01	; 1
 b1a:	08 95       	ret
 b1c:	9c c0       	rjmp	.+312    	; 0xc56 <__fp_zero>
 b1e:	67 2f       	mov	r22, r23
 b20:	78 2f       	mov	r23, r24
 b22:	88 27       	eor	r24, r24
 b24:	b8 5f       	subi	r27, 0xF8	; 248
 b26:	39 f0       	breq	.+14     	; 0xb36 <__fixunssfsi+0x46>
 b28:	b9 3f       	cpi	r27, 0xF9	; 249
 b2a:	cc f3       	brlt	.-14     	; 0xb1e <__fixunssfsi+0x2e>
 b2c:	86 95       	lsr	r24
 b2e:	77 95       	ror	r23
 b30:	67 95       	ror	r22
 b32:	b3 95       	inc	r27
 b34:	d9 f7       	brne	.-10     	; 0xb2c <__fixunssfsi+0x3c>
 b36:	3e f4       	brtc	.+14     	; 0xb46 <__fixunssfsi+0x56>
 b38:	90 95       	com	r25
 b3a:	80 95       	com	r24
 b3c:	70 95       	com	r23
 b3e:	61 95       	neg	r22
 b40:	7f 4f       	sbci	r23, 0xFF	; 255
 b42:	8f 4f       	sbci	r24, 0xFF	; 255
 b44:	9f 4f       	sbci	r25, 0xFF	; 255
 b46:	08 95       	ret

00000b48 <__floatunsisf>:
 b48:	e8 94       	clt
 b4a:	09 c0       	rjmp	.+18     	; 0xb5e <__floatsisf+0x12>

00000b4c <__floatsisf>:
 b4c:	97 fb       	bst	r25, 7
 b4e:	3e f4       	brtc	.+14     	; 0xb5e <__floatsisf+0x12>
 b50:	90 95       	com	r25
 b52:	80 95       	com	r24
 b54:	70 95       	com	r23
 b56:	61 95       	neg	r22
 b58:	7f 4f       	sbci	r23, 0xFF	; 255
 b5a:	8f 4f       	sbci	r24, 0xFF	; 255
 b5c:	9f 4f       	sbci	r25, 0xFF	; 255
 b5e:	99 23       	and	r25, r25
 b60:	a9 f0       	breq	.+42     	; 0xb8c <__floatsisf+0x40>
 b62:	f9 2f       	mov	r31, r25
 b64:	96 e9       	ldi	r25, 0x96	; 150
 b66:	bb 27       	eor	r27, r27
 b68:	93 95       	inc	r25
 b6a:	f6 95       	lsr	r31
 b6c:	87 95       	ror	r24
 b6e:	77 95       	ror	r23
 b70:	67 95       	ror	r22
 b72:	b7 95       	ror	r27
 b74:	f1 11       	cpse	r31, r1
 b76:	f8 cf       	rjmp	.-16     	; 0xb68 <__floatsisf+0x1c>
 b78:	fa f4       	brpl	.+62     	; 0xbb8 <__floatsisf+0x6c>
 b7a:	bb 0f       	add	r27, r27
 b7c:	11 f4       	brne	.+4      	; 0xb82 <__floatsisf+0x36>
 b7e:	60 ff       	sbrs	r22, 0
 b80:	1b c0       	rjmp	.+54     	; 0xbb8 <__floatsisf+0x6c>
 b82:	6f 5f       	subi	r22, 0xFF	; 255
 b84:	7f 4f       	sbci	r23, 0xFF	; 255
 b86:	8f 4f       	sbci	r24, 0xFF	; 255
 b88:	9f 4f       	sbci	r25, 0xFF	; 255
 b8a:	16 c0       	rjmp	.+44     	; 0xbb8 <__floatsisf+0x6c>
 b8c:	88 23       	and	r24, r24
 b8e:	11 f0       	breq	.+4      	; 0xb94 <__floatsisf+0x48>
 b90:	96 e9       	ldi	r25, 0x96	; 150
 b92:	11 c0       	rjmp	.+34     	; 0xbb6 <__floatsisf+0x6a>
 b94:	77 23       	and	r23, r23
 b96:	21 f0       	breq	.+8      	; 0xba0 <__floatsisf+0x54>
 b98:	9e e8       	ldi	r25, 0x8E	; 142
 b9a:	87 2f       	mov	r24, r23
 b9c:	76 2f       	mov	r23, r22
 b9e:	05 c0       	rjmp	.+10     	; 0xbaa <__floatsisf+0x5e>
 ba0:	66 23       	and	r22, r22
 ba2:	71 f0       	breq	.+28     	; 0xbc0 <__floatsisf+0x74>
 ba4:	96 e8       	ldi	r25, 0x86	; 134
 ba6:	86 2f       	mov	r24, r22
 ba8:	70 e0       	ldi	r23, 0x00	; 0
 baa:	60 e0       	ldi	r22, 0x00	; 0
 bac:	2a f0       	brmi	.+10     	; 0xbb8 <__floatsisf+0x6c>
 bae:	9a 95       	dec	r25
 bb0:	66 0f       	add	r22, r22
 bb2:	77 1f       	adc	r23, r23
 bb4:	88 1f       	adc	r24, r24
 bb6:	da f7       	brpl	.-10     	; 0xbae <__floatsisf+0x62>
 bb8:	88 0f       	add	r24, r24
 bba:	96 95       	lsr	r25
 bbc:	87 95       	ror	r24
 bbe:	97 f9       	bld	r25, 7
 bc0:	08 95       	ret

00000bc2 <__fp_inf>:
 bc2:	97 f9       	bld	r25, 7
 bc4:	9f 67       	ori	r25, 0x7F	; 127
 bc6:	80 e8       	ldi	r24, 0x80	; 128
 bc8:	70 e0       	ldi	r23, 0x00	; 0
 bca:	60 e0       	ldi	r22, 0x00	; 0
 bcc:	08 95       	ret

00000bce <__fp_nan>:
 bce:	9f ef       	ldi	r25, 0xFF	; 255
 bd0:	80 ec       	ldi	r24, 0xC0	; 192
 bd2:	08 95       	ret

00000bd4 <__fp_pscA>:
 bd4:	00 24       	eor	r0, r0
 bd6:	0a 94       	dec	r0
 bd8:	16 16       	cp	r1, r22
 bda:	17 06       	cpc	r1, r23
 bdc:	18 06       	cpc	r1, r24
 bde:	09 06       	cpc	r0, r25
 be0:	08 95       	ret

00000be2 <__fp_pscB>:
 be2:	00 24       	eor	r0, r0
 be4:	0a 94       	dec	r0
 be6:	12 16       	cp	r1, r18
 be8:	13 06       	cpc	r1, r19
 bea:	14 06       	cpc	r1, r20
 bec:	05 06       	cpc	r0, r21
 bee:	08 95       	ret

00000bf0 <__fp_round>:
 bf0:	09 2e       	mov	r0, r25
 bf2:	03 94       	inc	r0
 bf4:	00 0c       	add	r0, r0
 bf6:	11 f4       	brne	.+4      	; 0xbfc <__fp_round+0xc>
 bf8:	88 23       	and	r24, r24
 bfa:	52 f0       	brmi	.+20     	; 0xc10 <__fp_round+0x20>
 bfc:	bb 0f       	add	r27, r27
 bfe:	40 f4       	brcc	.+16     	; 0xc10 <__fp_round+0x20>
 c00:	bf 2b       	or	r27, r31
 c02:	11 f4       	brne	.+4      	; 0xc08 <__fp_round+0x18>
 c04:	60 ff       	sbrs	r22, 0
 c06:	04 c0       	rjmp	.+8      	; 0xc10 <__fp_round+0x20>
 c08:	6f 5f       	subi	r22, 0xFF	; 255
 c0a:	7f 4f       	sbci	r23, 0xFF	; 255
 c0c:	8f 4f       	sbci	r24, 0xFF	; 255
 c0e:	9f 4f       	sbci	r25, 0xFF	; 255
 c10:	08 95       	ret

00000c12 <__fp_split3>:
 c12:	57 fd       	sbrc	r21, 7
 c14:	90 58       	subi	r25, 0x80	; 128
 c16:	44 0f       	add	r20, r20
 c18:	55 1f       	adc	r21, r21
 c1a:	59 f0       	breq	.+22     	; 0xc32 <__fp_splitA+0x10>
 c1c:	5f 3f       	cpi	r21, 0xFF	; 255
 c1e:	71 f0       	breq	.+28     	; 0xc3c <__fp_splitA+0x1a>
 c20:	47 95       	ror	r20

00000c22 <__fp_splitA>:
 c22:	88 0f       	add	r24, r24
 c24:	97 fb       	bst	r25, 7
 c26:	99 1f       	adc	r25, r25
 c28:	61 f0       	breq	.+24     	; 0xc42 <__fp_splitA+0x20>
 c2a:	9f 3f       	cpi	r25, 0xFF	; 255
 c2c:	79 f0       	breq	.+30     	; 0xc4c <__fp_splitA+0x2a>
 c2e:	87 95       	ror	r24
 c30:	08 95       	ret
 c32:	12 16       	cp	r1, r18
 c34:	13 06       	cpc	r1, r19
 c36:	14 06       	cpc	r1, r20
 c38:	55 1f       	adc	r21, r21
 c3a:	f2 cf       	rjmp	.-28     	; 0xc20 <__fp_split3+0xe>
 c3c:	46 95       	lsr	r20
 c3e:	f1 df       	rcall	.-30     	; 0xc22 <__fp_splitA>
 c40:	08 c0       	rjmp	.+16     	; 0xc52 <__fp_splitA+0x30>
 c42:	16 16       	cp	r1, r22
 c44:	17 06       	cpc	r1, r23
 c46:	18 06       	cpc	r1, r24
 c48:	99 1f       	adc	r25, r25
 c4a:	f1 cf       	rjmp	.-30     	; 0xc2e <__fp_splitA+0xc>
 c4c:	86 95       	lsr	r24
 c4e:	71 05       	cpc	r23, r1
 c50:	61 05       	cpc	r22, r1
 c52:	08 94       	sec
 c54:	08 95       	ret

00000c56 <__fp_zero>:
 c56:	e8 94       	clt

00000c58 <__fp_szero>:
 c58:	bb 27       	eor	r27, r27
 c5a:	66 27       	eor	r22, r22
 c5c:	77 27       	eor	r23, r23
 c5e:	cb 01       	movw	r24, r22
 c60:	97 f9       	bld	r25, 7
 c62:	08 95       	ret

00000c64 <__divmodhi4>:
 c64:	97 fb       	bst	r25, 7
 c66:	07 2e       	mov	r0, r23
 c68:	16 f4       	brtc	.+4      	; 0xc6e <__divmodhi4+0xa>
 c6a:	00 94       	com	r0
 c6c:	07 d0       	rcall	.+14     	; 0xc7c <__divmodhi4_neg1>
 c6e:	77 fd       	sbrc	r23, 7
 c70:	09 d0       	rcall	.+18     	; 0xc84 <__divmodhi4_neg2>
 c72:	0e 94 4c 06 	call	0xc98	; 0xc98 <__udivmodhi4>
 c76:	07 fc       	sbrc	r0, 7
 c78:	05 d0       	rcall	.+10     	; 0xc84 <__divmodhi4_neg2>
 c7a:	3e f4       	brtc	.+14     	; 0xc8a <__divmodhi4_exit>

00000c7c <__divmodhi4_neg1>:
 c7c:	90 95       	com	r25
 c7e:	81 95       	neg	r24
 c80:	9f 4f       	sbci	r25, 0xFF	; 255
 c82:	08 95       	ret

00000c84 <__divmodhi4_neg2>:
 c84:	70 95       	com	r23
 c86:	61 95       	neg	r22
 c88:	7f 4f       	sbci	r23, 0xFF	; 255

00000c8a <__divmodhi4_exit>:
 c8a:	08 95       	ret

00000c8c <__tablejump2__>:
 c8c:	ee 0f       	add	r30, r30
 c8e:	ff 1f       	adc	r31, r31

00000c90 <__tablejump__>:
 c90:	05 90       	lpm	r0, Z+
 c92:	f4 91       	lpm	r31, Z
 c94:	e0 2d       	mov	r30, r0
 c96:	09 94       	ijmp

00000c98 <__udivmodhi4>:
 c98:	aa 1b       	sub	r26, r26
 c9a:	bb 1b       	sub	r27, r27
 c9c:	51 e1       	ldi	r21, 0x11	; 17
 c9e:	07 c0       	rjmp	.+14     	; 0xcae <__udivmodhi4_ep>

00000ca0 <__udivmodhi4_loop>:
 ca0:	aa 1f       	adc	r26, r26
 ca2:	bb 1f       	adc	r27, r27
 ca4:	a6 17       	cp	r26, r22
 ca6:	b7 07       	cpc	r27, r23
 ca8:	10 f0       	brcs	.+4      	; 0xcae <__udivmodhi4_ep>
 caa:	a6 1b       	sub	r26, r22
 cac:	b7 0b       	sbc	r27, r23

00000cae <__udivmodhi4_ep>:
 cae:	88 1f       	adc	r24, r24
 cb0:	99 1f       	adc	r25, r25
 cb2:	5a 95       	dec	r21
 cb4:	a9 f7       	brne	.-22     	; 0xca0 <__udivmodhi4_loop>
 cb6:	80 95       	com	r24
 cb8:	90 95       	com	r25
 cba:	bc 01       	movw	r22, r24
 cbc:	cd 01       	movw	r24, r26
 cbe:	08 95       	ret

00000cc0 <setjmp>:
 cc0:	dc 01       	movw	r26, r24
 cc2:	2d 92       	st	X+, r2
 cc4:	3d 92       	st	X+, r3
 cc6:	4d 92       	st	X+, r4
 cc8:	5d 92       	st	X+, r5
 cca:	6d 92       	st	X+, r6
 ccc:	7d 92       	st	X+, r7
 cce:	8d 92       	st	X+, r8
 cd0:	9d 92       	st	X+, r9
 cd2:	ad 92       	st	X+, r10
 cd4:	bd 92       	st	X+, r11
 cd6:	cd 92       	st	X+, r12
 cd8:	dd 92       	st	X+, r13
 cda:	ed 92       	st	X+, r14
 cdc:	fd 92       	st	X+, r15
 cde:	0d 93       	st	X+, r16
 ce0:	1d 93       	st	X+, r17
 ce2:	cd 93       	st	X+, r28
 ce4:	dd 93       	st	X+, r29
 ce6:	ff 91       	pop	r31
 ce8:	ef 91       	pop	r30
 cea:	8d b7       	in	r24, 0x3d	; 61
 cec:	8d 93       	st	X+, r24
 cee:	8e b7       	in	r24, 0x3e	; 62
 cf0:	8d 93       	st	X+, r24
 cf2:	8f b7       	in	r24, 0x3f	; 63
 cf4:	8d 93       	st	X+, r24
 cf6:	ed 93       	st	X+, r30
 cf8:	fd 93       	st	X+, r31
 cfa:	88 27       	eor	r24, r24
 cfc:	99 27       	eor	r25, r25
 cfe:	09 94       	ijmp

00000d00 <longjmp>:
 d00:	dc 01       	movw	r26, r24
 d02:	cb 01       	movw	r24, r22
 d04:	81 30       	cpi	r24, 0x01	; 1
 d06:	91 05       	cpc	r25, r1
 d08:	81 1d       	adc	r24, r1
 d0a:	2d 90       	ld	r2, X+
 d0c:	3d 90       	ld	r3, X+
 d0e:	4d 90       	ld	r4, X+
 d10:	5d 90       	ld	r5, X+
 d12:	6d 90       	ld	r6, X+
 d14:	7d 90       	ld	r7, X+
 d16:	8d 90       	ld	r8, X+
 d18:	9d 90       	ld	r9, X+
 d1a:	ad 90       	ld	r10, X+
 d1c:	bd 90       	ld	r11, X+
 d1e:	cd 90       	ld	r12, X+
 d20:	dd 90       	ld	r13, X+
 d22:	ed 90       	ld	r14, X+
 d24:	fd 90       	ld	r15, X+
 d26:	0d 91       	ld	r16, X+
 d28:	1d 91       	ld	r17, X+
 d2a:	cd 91       	ld	r28, X+
 d2c:	dd 91       	ld	r29, X+
 d2e:	ed 91       	ld	r30, X+
 d30:	fd 91       	ld	r31, X+
 d32:	0d 90       	ld	r0, X+
 d34:	f8 94       	cli
 d36:	fe bf       	out	0x3e, r31	; 62
 d38:	0f be       	out	0x3f, r0	; 63
 d3a:	ed bf       	out	0x3d, r30	; 61
 d3c:	ed 91       	ld	r30, X+
 d3e:	fd 91       	ld	r31, X+
 d40:	09 94       	ijmp

00000d42 <itoa>:
 d42:	fb 01       	movw	r30, r22
 d44:	9f 01       	movw	r18, r30
 d46:	e8 94       	clt
 d48:	42 30       	cpi	r20, 0x02	; 2
 d4a:	c4 f0       	brlt	.+48     	; 0xd7c <itoa+0x3a>
 d4c:	45 32       	cpi	r20, 0x25	; 37
 d4e:	b4 f4       	brge	.+44     	; 0xd7c <itoa+0x3a>
 d50:	4a 30       	cpi	r20, 0x0A	; 10
 d52:	29 f4       	brne	.+10     	; 0xd5e <itoa+0x1c>
 d54:	97 fb       	bst	r25, 7
 d56:	1e f4       	brtc	.+6      	; 0xd5e <itoa+0x1c>
 d58:	90 95       	com	r25
 d5a:	81 95       	neg	r24
 d5c:	9f 4f       	sbci	r25, 0xFF	; 255
 d5e:	64 2f       	mov	r22, r20
 d60:	77 27       	eor	r23, r23
 d62:	0e 94 4c 06 	call	0xc98	; 0xc98 <__udivmodhi4>
 d66:	80 5d       	subi	r24, 0xD0	; 208
 d68:	8a 33       	cpi	r24, 0x3A	; 58
 d6a:	0c f0       	brlt	.+2      	; 0xd6e <itoa+0x2c>
 d6c:	89 5d       	subi	r24, 0xD9	; 217
 d6e:	81 93       	st	Z+, r24
 d70:	cb 01       	movw	r24, r22
 d72:	00 97       	sbiw	r24, 0x00	; 0
 d74:	a1 f7       	brne	.-24     	; 0xd5e <itoa+0x1c>
 d76:	16 f4       	brtc	.+4      	; 0xd7c <itoa+0x3a>
 d78:	5d e2       	ldi	r21, 0x2D	; 45
 d7a:	51 93       	st	Z+, r21
 d7c:	10 82       	st	Z, r1
 d7e:	c9 01       	movw	r24, r18
 d80:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <strrev>

00000d84 <strrev>:
 d84:	dc 01       	movw	r26, r24
 d86:	fc 01       	movw	r30, r24
 d88:	67 2f       	mov	r22, r23
 d8a:	71 91       	ld	r23, Z+
 d8c:	77 23       	and	r23, r23
 d8e:	e1 f7       	brne	.-8      	; 0xd88 <strrev+0x4>
 d90:	32 97       	sbiw	r30, 0x02	; 2
 d92:	04 c0       	rjmp	.+8      	; 0xd9c <strrev+0x18>
 d94:	7c 91       	ld	r23, X
 d96:	6d 93       	st	X+, r22
 d98:	70 83       	st	Z, r23
 d9a:	62 91       	ld	r22, -Z
 d9c:	ae 17       	cp	r26, r30
 d9e:	bf 07       	cpc	r27, r31
 da0:	c8 f3       	brcs	.-14     	; 0xd94 <strrev+0x10>
 da2:	08 95       	ret

00000da4 <_exit>:
 da4:	f8 94       	cli

00000da6 <__stop_program>:
 da6:	ff cf       	rjmp	.-2      	; 0xda6 <__stop_program>
